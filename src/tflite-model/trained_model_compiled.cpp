/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 19.09.2021 15:53:14

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2336;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[26];
TfLiteEvalTensor tflEvalTensors[26];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[12];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003890931373462081, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 160, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[16] = { -835, -11156, 3560, 1731, 2263, 830, 414, 921, 195, -10200, 1450, 2673, 2136, -3258, -4786, 1979, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 9.3446133178076707e-06, 8.9921541075455025e-06, 1.0271462087985128e-05, 1.1529964467626996e-05, 1.2131706171203405e-05, 1.4114667465037201e-05, 1.2730184607789852e-05, 1.2832280845032074e-05, 1.265811897610547e-05, 1.1492089470266365e-05, 1.230553061759565e-05, 1.3368267900659703e-05, 1.2608869838004466e-05, 1.0871483937080484e-05, 1.1204292604816146e-05, 1.1345239727234002e-05, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[32] = { -1420, -1159, 2956, 2899, -1004, -1747, -778, -244, 395, -4584, -1065, -2969, -1076, -3645, 5406, -3986, -1694, 268, -2413, 3335, -5400, -2900, -1369, -1233, -1987, -2046, 3880, 4159, -1450, -4337, 3951, -1853, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 1.7972657587961294e-05, 2.3770055122440681e-05, 2.2402737158699892e-05, 2.4400656911893748e-05, 1.9742779841180891e-05, 1.9702138160937466e-05, 2.2036416339688003e-05, 2.6946336220134981e-05, 3.1130450224736705e-05, 1.7478752852184698e-05, 2.4787408619886264e-05, 2.3965099899214692e-05, 2.0172259610262699e-05, 2.3061293177306652e-05, 2.013326775340829e-05, 2.0330026018200442e-05, 2.0449950170586817e-05, 3.2707652280805632e-05, 2.3085698558134027e-05, 2.4886474420782179e-05, 2.0884190234937705e-05, 1.7148442566394806e-05, 2.4791750547592528e-05, 2.3562208298244514e-05, 2.2319869458442554e-05, 2.707933344936464e-05, 2.5433280825382099e-05, 2.2853571863379329e-05, 2.3008848074823618e-05, 1.96831751964055e-05, 2.4823428248055279e-05, 2.5572076992830262e-05, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[64] = { -634, 2851, -300, -1066, 3171, 2616, 148, -195, -900, 4465, -109, -913, 302, 4361, -948, -959, -1085, 204, 3718, -454, 3693, -841, -527, 3632, -528, -1006, -565, -481, -554, -525, 2853, -600, 3882, 5014, 3463, -905, -593, 3573, -568, -840, 364, 1227, -877, 31, 3160, -510, 3551, -773, 517, -436, 3354, 638, -528, -666, -476, 230, -280, -497, -711, 3766, 2793, -416, -1662, 4261, };
const TfArray<1, int> tensor_dimension4 = { 1, { 64 } };
const TfArray<1, float> quant4_scale = { 1, { 5.6816774304024875e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[2] = { -1098, 1098, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00016582490934524685, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[64*160] = { 
  -25, 55, 37, 43, 48, -2, -1, 22, 28, 27, 1, 55, 31, -8, -1, 1, 66, 21, 35, -8, -9, 48, -12, 66, -9, 40, 2, 0, -4, 56, 14, -29, 32, -6, -12, 46, -63, 8, -42, 40, 54, 20, -21, -12, 47, 15, 44, 43, 59, 46, -13, 12, 8, -21, 27, 45, 1, -1, 3, 5, 57, 19, -42, -9, -1, 3, -13, 9, 28, -45, 6, 21, 37, 6, -4, -22, -1, -1, -57, -44, 1, 14, -13, -53, 11, 4, 62, 48, -5, 29, -39, -41, -12, 35, -2, 70, -18, 52, -33, 18, 37, 5, 19, -18, -51, 21, 36, 34, 13, 42, -1, 1, -9, -13, -14, 0, -5, 10, 12, 2, 38, 8, 32, 8, 13, -13, 18, 57, 46, 25, -18, 31, 50, -4, 14, -17, 25, 46, 70, 53, 52, -10, 4, 13, 43, -2, 6, 24, 64, -1, -21, -11, 51, 65, -24, -21, 64, 4, 33, 31, 
  40, -62, -42, -10, -44, -17, 24, 6, 39, 8, -17, 3, -7, -23, 16, -52, -31, 4, -67, -3, -32, -42, -30, -97, -26, -1, 22, -9, -9, 32, 4, -19, -4, 5, 34, -2, -4, -27, 71, -12, -10, 5, 3, 24, 6, 18, -25, -21, 19, -18, -10, 20, -35, -2, 4, -2, 5, -21, 16, 8, -45, 34, 9, -8, 6, 0, 31, 11, 13, 54, -68, -19, -10, -21, -33, 36, -16, 54, 9, 32, -17, -45, 38, 12, 6, 40, 6, -22, -1, -44, 18, 69, 22, 17, 52, -1, 58, -51, 3, 27, -38, 7, 0, -16, 18, -27, 16, -33, 11, 8, 49, 10, 40, 39, 23, 31, -24, -11, -21, 16, -55, 5, 26, 14, -67, 48, -1, -38, -3, -64, 8, 13, 15, -10, 34, 30, -50, -41, 27, -29, -37, -53, 7, 25, 3, 30, 5, -7, -31, -15, -45, -52, -19, -8, -6, -38, -25, -14, -16, 32, 
  -58, 63, 31, 34, 1, -1, 6, -29, -27, 27, 45, 68, 35, 29, -12, 57, 48, 32, 67, 30, -8, 36, 44, 62, 22, 73, -12, 2, 5, -6, 37, 5, 63, 37, 21, -2, -57, 44, -61, 29, 30, 17, 27, -15, 51, 27, 53, 42, 10, 52, -15, 38, 60, 4, -18, 8, -29, 35, 34, -5, 37, -25, -35, 18, -22, 8, 18, 14, 5, 7, 46, 1, 19, 8, 30, -32, -21, -58, 12, -50, 30, 41, -21, -30, 30, -48, 17, 29, -17, 61, -57, -51, 1, 43, -17, 52, -66, 59, 2, 23, -11, -18, 57, -19, -44, 9, 35, 6, 8, 12, -11, 27, 2, -21, -30, 36, 15, -10, 6, -19, 27, 57, 41, 5, 15, -35, -28, 63, 40, 41, -6, -6, 14, 20, 4, -22, -12, 57, 29, 41, 35, -16, 12, 25, 38, 6, -21, 30, 1, -18, 24, 1, 49, 14, -21, -7, 20, 48, -8, 16, 
  -43, -31, 12, 16, 31, 21, 10, 20, 23, -15, 25, 21, -7, 13, 10, 18, -3, 18, -8, 19, -38, 25, -23, 17, -15, 4, -2, -32, -46, -6, -44, -27, -51, 3, -23, 8, -23, 6, -49, -25, -20, -21, -18, -16, -40, 16, 1, -19, -15, -18, -29, 6, 3, -19, -36, -16, 2, -43, 20, -3, -5, 1, -49, -31, -17, -1, -27, 17, 6, 25, 11, -37, -39, 10, -2, -11, -24, 35, -43, -37, 6, -26, -30, 22, -35, -26, -4, -32, -5, -47, 0, -3, 1, -3, -19, -1, 9, -12, 18, 34, -32, -13, -1, 24, 26, -13, -34, -16, -5, -40, 12, -14, 22, -50, 10, -23, 19, -38, 19, 31, -14, -7, -7, -3, 4, -1, 17, -30, -41, 19, -3, -34, -45, -26, -48, -13, 9, -41, 4, -25, -4, 11, -24, -30, -9, 29, 32, 6, -20, 4, -27, -6, 4, -3, -13, -41, -17, -33, 9, 28, 
  50, -41, -5, 26, -30, 1, -28, 56, 43, -2, -35, 7, -43, -62, -1, 18, -12, -28, -35, 54, -16, -9, -28, -77, -42, -58, 27, -42, -13, 44, -40, 33, -23, -60, 48, 34, 12, 38, -20, -63, -26, -24, -13, -29, -8, -14, 19, -15, -59, -70, 34, -32, -45, 21, -18, -52, -38, -45, 26, -21, -30, -22, 41, -29, -55, -44, 32, 11, -35, -31, -28, 19, -15, 31, -38, -34, -6, 34, 63, -1, -12, -38, 34, 70, -6, 43, -73, -6, -67, -45, 77, 32, -36, 63, 55, -64, -9, -3, 28, -5, 5, 7, -24, 36, -5, -34, -36, -58, -47, -48, 20, -14, 18, 3, -10, 44, -10, 19, -42, -28, -11, -34, 10, -13, -26, 4, -7, -39, -10, -13, -17, 1, -41, -22, 14, 40, 3, -3, -71, -43, -66, -7, 5, 13, -46, 21, -24, 24, -13, -17, 28, -16, -58, -24, 53, -5, -41, 21, 1, 25, 
  4, 5, -41, 11, -31, 11, -21, 13, 38, -24, -13, -41, 3, 21, 9, 17, -30, -41, -18, 8, -42, -68, 16, -48, 30, -39, 12, -8, 17, -45, -16, -28, -54, -14, 3, 13, 16, -21, -15, -50, 7, -11, 13, 45, -30, 1, 27, -45, -32, -43, 30, -5, -55, 16, 37, -27, -14, -56, 45, -14, 17, -21, 61, 14, 16, -57, 41, 59, -47, 22, -4, -10, -14, 34, -36, 26, 49, 21, 46, 25, 10, -53, 23, 39, -45, -3, -48, 11, -38, -67, 34, 71, -8, -106, -12, -61, 10, -28, 44, 1, 2, -47, -38, 19, 47, 16, -33, 7, 22, -24, -19, 3, -19, 33, -52, -31, 6, 17, -40, 19, -54, -50, 38, 45, -53, -46, 44, 13, -16, -6, -25, 12, 21, -30, -7, 42, -4, 4, -10, -58, -12, -51, 50, 24, -17, 12, -16, 30, -6, -12, -12, -49, -63, -44, 23, -19, -16, -29, -35, 17, 
  -66, 10, 1, 22, 45, 28, 5, -13, 11, 37, 12, 1, 30, -9, -3, 2, 70, -9, 29, 5, 43, 19, 11, 110, 31, 59, -22, 11, -13, -23, 22, -29, 63, 57, -9, -17, -77, -41, -10, 46, 6, 37, -21, 15, 16, -8, 17, -7, 29, 73, 1, -7, 7, -35, -28, 17, 23, 76, 5, 5, 39, -13, -31, 11, -45, 44, 17, 3, 33, -46, 10, 52, -19, -60, -14, -6, -39, -24, 4, -12, 55, 30, -43, -34, 11, -9, 88, 58, 16, 19, -44, -69, 30, 23, -9, 33, -41, 0, -21, -4, -3, -33, 66, -26, -70, -29, 47, 28, 45, -9, -51, 24, 45, -22, -9, 14, -23, -17, -9, 20, 24, 10, 7, -29, 60, -36, 5, 29, 28, 44, -10, 15, -3, -33, 22, 4, -22, -29, -1, 54, 29, 9, -9, -1, -13, -21, -36, 11, 31, 26, 53, 14, 56, 7, -1, -25, 55, -19, 13, -5, 
  -1, 26, -2, 22, 52, 22, 6, 40, -25, -6, 9, 15, 30, 4, -22, -19, 14, 11, 66, -13, 30, 19, 13, 30, -9, 35, 8, 30, 21, -22, 22, 35, 30, -21, -14, 39, -65, -10, 10, 52, 43, 31, -14, -5, 44, -13, 26, 1, -11, 57, -11, 15, 8, -13, -14, 23, -30, 68, 41, 12, 20, 52, -5, 24, -2, 2, 21, -41, 5, 0, -1, 50, 7, -43, 39, 3, -1, -22, -57, -3, 50, 62, -13, -22, 19, -23, 29, -26, 9, 38, -55, -35, 25, 17, -8, 38, -68, 14, 15, -38, 38, -30, 45, -3, -80, -11, 50, -27, -33, -12, -49, 5, -26, 21, 34, -25, -5, -20, 9, -4, 40, 18, -14, -32, -3, 32, -23, 68, 1, 31, -31, 45, -12, -15, 46, -11, 30, 21, 44, 50, 36, 27, -3, -28, 41, -18, -10, -5, 70, -9, -20, 52, 59, 70, -32, 34, 74, 3, 40, -20, 
  -21, 45, 55, 14, 53, 12, 43, 31, -50, -10, 22, 19, 65, 9, -18, 14, 7, -12, 58, 7, 39, 14, 2, 38, 45, 10, 26, 26, 12, -33, 46, -26, 2, 45, 33, -6, -81, -4, -29, -9, 47, 15, -28, -18, 13, 44, 3, 1, 44, 12, -1, -15, 35, 30, 35, 27, -6, 9, 30, 39, 37, 28, -25, -1, 10, 53, 5, -15, -32, 23, 52, 15, -8, -10, 57, -3, -52, 2, -36, -11, 25, 39, -22, -46, -41, -33, 17, 4, -30, 51, 13, -22, -22, 12, -44, 49, -29, 11, 11, -30, 40, 12, 77, 20, -15, -35, 36, -1, 58, 6, 17, 15, 29, -3, 15, -6, -48, 31, 9, 15, 29, 49, -8, -42, 49, 18, -8, 27, 31, 65, 15, 32, 30, 13, -11, -36, 55, 0, 54, 68, 19, 8, 11, -27, 53, 11, 27, -26, 77, 9, 34, 38, 82, 14, -28, 11, 13, -18, -11, 16, 
  50, -13, -50, -1, -30, 35, 21, 67, 51, -24, 6, -32, -53, 28, 25, -21, -32, -25, 0, 34, 11, -35, 29, -64, 21, 1, -1, -6, -9, -57, 15, 32, 4, -13, 16, -13, 70, -26, 42, 8, 2, -26, 17, 35, -16, -6, 27, -12, 9, -43, 38, 15, -21, 47, 27, -9, 15, -41, 13, -3, -30, -16, 30, 14, -4, -10, -7, 52, 47, 74, -42, -33, -15, 52, 5, 15, 0, 55, 52, 67, 15, 11, 51, 48, 12, 28, -33, -25, 15, -49, 55, 58, 16, 3, 39, 6, 53, -22, 46, 53, -33, -6, -35, 38, 85, 51, -43, -34, -18, -11, 57, 40, -17, 51, -22, 24, 70, 1, -25, 0, -61, -35, 10, 43, -32, 25, 26, 0, 5, -16, 19, 23, -26, 41, 12, -10, -23, -3, -52, -63, -22, -3, 0, 47, -11, 56, -5, 9, -16, 42, 12, -11, -6, -8, 39, 13, 2, -7, 6, -2, 
  -25, -56, -30, -45, -27, -22, 8, 18, 26, -22, -49, -51, -11, -55, 42, 6, 7, -31, 15, -8, -64, -12, 11, 10, -41, -17, 0, 36, -36, 20, -31, 26, -6, 20, -38, -59, -19, -44, -44, -40, -18, -2, -24, -3, 16, -45, -36, -45, -33, -39, -36, -13, -22, -36, -25, 10, -5, 41, 71, -2, 3, -9, -9, 3, -3, 28, -51, 23, 29, 6, -19, -17, -19, 32, -47, -28, -15, 4, -12, -11, 5, -5, 38, -35, -9, -27, -78, 17, 20, -44, 2, -11, 8, -2, -1, -56, 31, 15, 0, 11, -36, 12, -30, -9, 31, 6, 6, -39, -8, 38, 0, -22, 0, -2, -28, 26, -32, -28, -31, 17, 0, -4, 16, 1, -36, -37, -36, -16, -35, -34, -31, 13, 26, -19, 18, 4, -15, 9, -50, -44, -28, -18, 13, -27, 1, -8, -8, 40, 20, 9, 4, -41, 19, -46, -3, -38, -33, -26, 3, -8, 
  16, -10, -13, 21, -26, 4, -50, 15, 25, -40, 21, 12, 26, -23, 3, -47, -3, 7, 23, 25, 2, -31, -6, 0, 24, 18, 19, 26, -16, 13, -40, 17, 6, -18, 10, -50, 22, 13, -29, -22, -10, 0, -1, -6, -14, -19, -45, -40, 2, 18, 16, -13, 11, 8, 20, 12, -30, -37, -29, -3, -4, -8, -15, 3, -16, -35, -37, -26, 41, 7, -29, -24, -22, -14, 3, -13, -13, -5, 32, 30, -29, -43, 3, -12, -38, -13, 18, -15, 3, -29, 3, -4, -40, -28, -14, -37, 24, -6, -15, 24, 28, -14, -21, -41, 7, -16, -1, 3, -37, 5, -23, -5, 10, -1, -18, -11, 24, 23, -47, 28, -5, -18, 1, -35, -28, -31, -22, 28, -4, 20, -3, -15, -7, 0, -12, -2, 22, -16, 9, -30, 20, -26, -49, -3, -46, 11, 11, -8, -18, 14, -28, -30, -30, -51, -22, 26, -20, -3, 25, 5, 
  3, 53, 26, 36, 38, -21, 32, 21, 10, -37, 4, -36, 16, -30, 13, -17, 22, -15, -16, -8, 11, 63, -4, 57, 42, 5, 30, 12, 27, 16, -17, 8, 34, 25, 1, -40, -58, 24, -64, 28, 51, 7, -15, -11, 15, -53, -29, -29, 25, 37, 4, -7, 49, -33, -21, 74, -46, 43, -7, -28, 19, -27, -39, 25, -68, 43, -2, -31, -11, -8, 53, 62, -23, -45, 54, -59, -8, -25, 7, -18, 31, 5, 4, -9, -41, -10, 37, 71, 26, 85, 2, -66, -9, -19, -8, 26, -75, 36, -45, 25, 31, 21, 28, 13, -47, -2, 35, 37, -9, -12, 6, 9, -3, -27, -30, 7, -4, -36, 46, -18, 12, 60, 32, -37, 66, 37, -13, 53, 8, -17, 11, -9, 32, 3, -18, -20, 24, 52, -7, 31, 47, 12, -26, -4, 28, -21, -40, -5, 32, -20, -27, 28, 24, -22, 13, -16, 39, 15, 21, 16, 
  65, -16, -2, 4, -51, 18, -18, 43, 27, -22, -35, -15, -48, 2, -20, -40, 13, 47, -71, -24, 2, -18, 33, -63, 44, -47, 56, 12, -35, -39, 2, 6, 23, -2, 38, -24, 43, 15, 18, 23, -85, -29, 25, 35, -18, 18, -10, -38, -3, -17, 5, -19, -59, -16, 46, -42, 9, 6, 41, -10, -35, -32, 22, 48, 1, -2, 50, 66, -7, 30, -61, 33, 5, 27, -59, -22, -4, 45, 4, 84, -47, -36, 18, 64, 0, 57, 6, -18, -14, -72, 93, 33, 13, 24, 52, -52, 12, -38, -6, 19, 11, 16, -32, 7, 15, 5, -39, -2, 21, -31, -8, 45, 7, 60, -10, -13, -9, -18, -48, 17, -17, -20, 54, 57, -22, -23, 28, -19, -26, -28, 18, -56, -11, 39, 26, 22, -26, -29, -56, -53, -42, -1, 2, -16, -64, 42, 26, 9, -40, -15, 37, -8, -18, -66, 72, -12, -72, -13, 31, 55, 
  6, 49, 71, 0, 64, 54, 29, -15, -54, 17, 24, 29, -1, 54, 9, 12, 34, -1, 20, 29, 29, -15, -23, 57, 40, 13, -3, 7, 57, 20, 37, 19, 53, -14, -7, -3, -17, -13, -4, 33, -3, -23, 11, 9, -3, 18, 37, -3, 5, 47, -31, -10, 62, -3, -24, 17, 32, 54, 9, -11, 9, 74, 27, -5, 17, -2, -18, -19, -11, 51, 42, 12, 22, -17, 50, 17, 14, -12, -41, 3, 40, 14, -4, 9, 25, -28, -7, -26, -17, 61, -27, -35, 6, 27, -48, 68, -33, 43, -24, -4, 28, -23, 35, 8, -47, 14, 48, 17, -4, -3, -19, 2, 14, -27, -23, 15, -61, -30, 10, -50, 16, 30, 17, -9, -7, 31, -40, 60, 37, 1, 34, 4, 23, -6, 37, -22, -4, -21, 25, 7, 35, 40, -11, -39, 12, -15, -28, 12, 15, 23, 41, -4, 41, 73, -6, 47, 57, 7, 2, 10, 
  -39, 4, 37, 34, 26, 28, 11, -14, 11, 67, 33, 54, 68, 50, 40, 63, 78, 2, 31, -9, 26, 24, 30, 66, -10, 16, 7, 68, -4, -10, 11, 38, 61, -14, -29, -21, -33, 44, -10, 37, 78, 5, -26, 31, 61, -20, 32, 35, 44, 36, 8, 19, 18, -3, 10, 24, -15, 67, 6, 47, -12, 23, 4, -14, 15, -8, 12, -44, 18, -45, 59, 2, 20, -7, 46, -16, -38, -25, -7, -13, 42, 61, -21, -44, -5, -67, 41, 49, 1, 65, -53, -7, -3, 33, -42, 44, -56, 59, -47, -1, 22, -24, 30, -24, -57, -5, 56, -12, -4, 51, -14, -26, -4, 7, -17, 19, 9, 33, 61, -3, 51, 25, 5, -52, 10, 6, -7, 39, 12, 47, 24, -8, 8, -47, 39, -28, -11, 33, 12, 14, 11, 43, -7, -46, 14, -8, 32, -18, 57, 19, 35, -10, 63, 54, -15, -21, 72, -20, 47, -27, 
  -22, 6, 10, 27, 69, -37, 42, 4, -34, 4, 5, 24, 33, 26, 3, 24, 9, 40, 24, -10, 29, 23, 20, 81, 28, 10, -40, 44, 35, -3, 36, 36, 50, 13, -31, 42, -24, -10, -40, 47, 20, 17, 15, 8, -9, -13, 8, -39, 14, 47, -34, 3, 26, -4, -48, 55, 2, 12, 14, 2, 49, -52, -37, -11, -20, 62, -21, 3, 23, -70, 9, 30, 11, -46, 7, -8, -43, -76, -28, -7, 60, 70, 32, -26, 17, -28, 74, -11, 13, 8, -14, -55, -24, -5, -29, 49, -58, 16, -37, 3, 9, -48, 44, -1, -4, -12, 13, 3, 6, -11, -10, 9, 12, 13, 22, 39, -5, -28, 7, 7, 45, 62, 12, -20, 9, -10, 18, 67, 4, 19, 14, 1, 25, -26, -40, 23, 4, -26, 47, 22, 50, -17, -45, 1, 44, 1, 4, 24, 19, 5, -25, 43, 19, 28, 6, -6, -1, -7, 22, 18, 
  -45, 9, 43, 50, 61, -16, 51, -4, -42, 6, -27, 22, 55, -11, 4, -19, 50, 14, 9, 14, 48, 0, -2, 47, -4, 0, -23, -2, 26, 13, 31, 6, -31, 26, 18, 0, -19, 40, -14, 62, -2, 13, -45, 9, -2, -12, -10, 20, 46, 61, 10, 55, 57, -2, -44, 69, 6, 51, 25, -26, -6, 60, -34, -21, 28, 20, -37, -23, -19, 16, 22, 35, 22, -42, 30, -6, -16, -30, -33, 1, -40, 54, -2, 0, 10, -1, 55, 19, 3, 51, 23, -39, 27, 11, -11, 26, -37, 76, 6, -50, -41, -42, 15, 22, -25, 1, -11, 21, -22, -21, -23, -40, 34, 2, 46, -17, -63, -17, 59, -24, -12, 3, 48, -60, 18, 17, 29, 62, 1, 19, -17, -2, 29, 4, 21, -65, -23, 42, 79, 29, 68, 63, 2, 26, 17, -13, -18, -19, 6, -27, -43, 21, 72, -6, -20, 16, 40, 56, -12, 3, 
  74, 6, -43, 23, -32, -22, -7, 71, 56, 34, -14, 13, 14, -43, -4, -6, -36, 24, 23, -16, -35, -7, -24, -78, -22, 6, 16, 9, -2, -37, 33, 40, -59, -8, -3, 51, 13, -10, 13, -56, -108, -51, -17, -11, -8, 34, -21, -22, -64, -75, -4, 20, -37, 34, -16, -37, 51, -37, 43, 8, -48, 82, 50, -28, 20, -19, 33, 34, 42, 6, -69, -12, -43, 28, -26, -6, 5, -22, 78, 18, -55, -41, -20, 74, -35, -24, -32, -2, 4, -65, 34, 31, -75, -10, 53, -41, 4, -68, 22, -19, 28, -1, -22, 51, -14, -27, -6, -10, -34, -11, 58, -24, 16, -16, -4, -12, 33, 2, -27, -7, -44, -49, 9, -11, -9, 0, 2, 3, -33, 7, 34, -6, -16, 42, 11, 20, -36, -16, -28, -28, -2, -31, 37, 0, -50, -11, -2, 30, -30, -19, -16, -28, -42, -46, 35, -35, 27, 78, 39, 21, 
  9, 33, -22, 0, 4, -26, -16, 19, -22, -19, -11, -28, -26, -6, 7, 5, -1, 29, 26, -10, -4, 14, 11, 42, -13, 6, 34, -23, 2, 8, 12, -6, 15, 1, -42, -11, -23, -11, -25, 22, 25, 23, 26, 14, -34, -32, -16, -33, -37, -47, 15, -24, 17, -29, 32, -4, 3, -40, 2, -12, -15, -23, -11, -35, -3, -23, -8, 15, -25, -4, 16, -15, -18, -24, -51, -31, -28, -16, -2, 21, 21, -39, 45, -25, 1, 25, 20, 24, -32, -48, -42, -35, -25, 27, 1, -26, -7, -23, 13, 8, 31, -27, 26, -10, -10, -23, -16, -25, -31, 1, -22, -16, 31, -20, 22, -11, -10, 19, 6, 10, -31, -4, -37, -8, -18, -5, -10, -17, -38, 25, 30, -20, 21, -15, 11, -30, 22, -6, 2, 14, -7, 30, 26, -47, 19, -42, 16, -12, -17, -38, 10, 6, -8, -37, 7, 9, -15, -24, -26, 32, 
  13, -54, -55, -21, -8, 8, -35, 7, -17, 2, -11, -5, 6, -12, 17, -37, -24, 14, -44, 5, -83, -14, -1, -89, 12, -74, -4, -9, -5, -47, 7, -9, -8, -24, 2, -26, 26, 42, 12, -54, 6, -18, -19, 23, -32, 4, 9, 37, -50, -42, -9, 4, -6, 9, -12, -9, 28, -60, 31, 24, -58, -16, 52, 47, -8, -14, 10, 28, 2, -5, -6, 21, 24, 1, -49, 60, 36, 66, 91, 47, -21, -9, -8, 94, 31, 65, -4, -27, 33, -67, 65, 38, -33, -54, 61, -21, 81, -40, 19, -19, -15, -11, -69, 53, 50, 32, -11, -11, 9, 4, 48, -21, -3, 42, -10, 15, 5, -6, -15, -23, -40, -41, 6, 55, -48, -18, 31, -24, -54, -57, -22, -44, 19, 43, -21, 60, -24, -24, -37, -43, -57, 16, 35, 24, -20, 30, -34, 20, -52, -38, -41, -61, -47, -5, 18, 19, -2, 29, 4, 21, 
  5, 15, -1, -17, 8, 34, 26, 18, -44, 31, -32, -5, -21, 9, -2, -41, 2, 18, 5, -41, 3, -38, -28, 1, -28, 0, -36, 13, -7, 27, -43, 31, 11, -6, 28, -18, -17, 22, 4, 4, -3, -26, 4, 23, -6, -8, 13, -25, -28, 2, -6, 24, -21, -38, 16, 10, 16, -24, 12, -25, 15, -36, 15, 20, 10, -5, 24, -29, -19, -9, -34, -43, -31, 14, -9, -20, -24, -36, 23, -32, -43, -29, -9, -14, 20, -44, 30, 7, 31, 14, -44, -10, -6, 34, -27, -25, 31, -46, 5, -27, -37, -14, 19, -15, -34, -21, -22, -28, -30, -10, -40, -35, 30, -47, 8, -12, -35, -43, -30, -28, 28, 1, -35, -31, 13, -23, -6, 8, 2, -40, 28, -21, -22, -17, -42, -13, 17, -2, 22, 7, 33, -31, -34, -16, -44, -2, 4, 23, -28, -32, 21, 17, -10, -19, -7, 2, -6, -23, -3, -13, 
  -5, 39, 50, 29, 31, 4, 27, 0, -19, 46, 10, 67, 44, 28, 20, -7, 35, 0, 3, 31, 35, -18, 54, 22, 24, 64, -28, -2, 3, 7, 8, 34, 13, -10, -42, 14, -10, -13, -6, 33, 15, 46, -19, -8, 9, -3, 43, -25, 22, 54, -13, 51, 45, 13, -27, 38, -28, 30, 17, -2, -42, -8, -14, -7, 3, -7, -6, 34, -17, 27, 64, 6, 33, 0, 52, 8, -37, -12, -25, -2, -22, -29, -7, -13, -28, -67, 1, 5, 28, 64, -48, 15, -25, 6, 2, 18, -15, 51, -35, -12, 27, -15, 12, -35, 8, -25, 14, -2, 36, 37, -15, 9, 4, 4, 37, 22, -61, -36, -27, -19, 58, 30, -39, -9, 56, -6, 16, 1, 18, 40, -39, -27, 34, -34, 33, -27, 46, 43, 35, 45, 61, 51, -14, 19, -1, 24, -22, 9, -13, -21, 9, -3, 57, 82, -22, 15, 12, -35, -26, 13, 
  23, 7, -39, -20, -17, -22, 10, 36, 30, -51, -42, -38, 6, -54, -30, -43, -67, 4, -75, 12, -28, -16, -8, -51, -6, -44, 24, -50, -15, -36, 23, 57, 12, -34, 34, -19, 63, -2, 60, 4, -71, -21, 55, -35, -24, -4, -32, 29, -14, 13, 22, -34, -51, -43, 39, -7, 49, -49, 31, -23, -19, -41, 43, 16, -5, -10, 0, -5, -13, -9, 2, -23, -46, -3, -7, 32, 37, 61, 38, 45, -10, 6, 26, 74, 11, -4, -31, -53, 11, -79, 97, 17, 7, -1, 71, -11, 41, -52, 8, 6, -43, 29, -39, 13, 48, 43, -40, 10, -4, -13, 14, 16, 31, 25, 27, -24, 22, 17, -41, 19, -57, 4, 59, 38, -56, -48, 38, -35, 17, -51, -12, -29, -1, -26, -11, -16, -5, 8, -36, -52, -65, -25, 31, 8, -16, 31, 8, 11, -12, 14, 28, -38, -8, -80, 36, 33, -65, -27, -21, 14, 
  -28, -34, -16, -20, 19, -29, -25, -4, -21, -9, -24, -36, 24, 24, 26, 10, -18, 20, 25, -2, 5, 23, 14, 11, 28, -16, -36, -21, -36, 28, -28, -45, -32, 21, -2, -13, -30, -29, 26, -15, 0, 20, -18, -14, 29, -31, -42, -40, 15, -28, -14, -37, 15, 13, -36, -16, 6, -15, -8, -33, -11, -3, -14, 4, -2, -44, 1, -35, 16, 5, 1, 13, 7, -41, 14, -29, -38, 6, 0, -26, -9, -10, -11, -16, -30, -20, -32, 13, 0, -39, -35, -12, -16, -27, -8, -15, -20, 5, 27, -30, -32, 34, 7, -18, 14, 3, 7, -13, -14, 13, -22, 1, 29, -7, -6, -22, 31, 21, 2, -16, -25, -8, -34, -38, -34, 14, -26, -11, 9, -26, -34, -11, 4, -18, -25, 31, 1, -7, 31, -12, -22, -1, 13, 12, 1, 14, 26, 21, 16, 11, -15, -38, 1, -39, 9, 15, -21, -18, 9, -34, 
  -1, 43, 28, -2, 23, -12, 69, 12, -2, 40, 24, 26, 68, 30, 26, 57, 9, 16, 72, 13, 11, 35, 34, 66, -29, 65, 22, -7, -15, 4, 46, 20, 27, 43, -6, 35, -52, -28, -65, 0, 55, 55, -13, -17, 35, 50, 8, 42, 46, 32, -17, 14, 41, 38, 3, 67, -32, 59, 39, -20, 13, 27, -1, -19, -28, 46, -6, -41, -28, -51, 40, 63, 10, -4, 8, -16, -7, -57, -42, -59, 24, -14, -13, -66, 11, -47, 53, 26, -19, 37, -51, -41, 36, -1, -3, 73, -9, 33, 15, -38, 37, -11, -8, -3, -19, 21, 66, 3, 33, 44, -13, 27, -24, 32, 48, 17, -6, 10, 68, -24, 52, 40, 7, -28, 7, -14, -32, 56, 52, 26, -3, 39, 2, 30, 10, 1, 42, 63, 57, 18, 53, 39, 12, -22, 62, -24, 50, 20, 10, -13, 35, 36, 17, 38, -21, 26, 76, 44, 19, 33, 
  -12, 7, 50, 18, 51, 36, 21, -20, -30, -18, 48, 39, 37, 52, 15, 23, 20, -6, 5, 36, 68, 9, -15, 89, 31, 33, -21, 41, 21, 44, 14, -27, 41, 46, 25, 33, -63, -38, -45, 42, 75, 23, 1, 8, -17, 12, 14, 11, 11, -6, -11, -8, 45, 12, -2, 12, 5, 4, -19, -3, 62, -26, -26, -44, 25, 10, -8, -32, -23, -49, 33, -8, -27, -17, 15, -27, -6, -31, -44, 2, 44, 32, -22, -18, -41, -23, 42, 41, 32, 56, -39, -15, 14, -28, -37, 34, -24, 25, 22, 22, -14, -65, 50, -36, -30, -29, 21, 11, 20, 48, -47, -35, -22, -9, 18, 21, -23, -29, 55, -26, -2, 32, 29, -21, 48, 24, 26, 56, -9, -9, -17, 1, 1, -7, 34, 21, -8, 35, 39, 41, 19, -22, -17, 0, 24, 15, 1, -30, 27, 3, 13, 37, 24, 2, 14, 4, 28, 10, 33, 9, 
  -31, 26, 27, 3, 63, 31, 38, -15, -13, 2, 46, 46, 21, 31, 51, 11, 19, -7, 64, 16, 58, 51, 27, 88, 33, 60, 41, 24, 10, 44, 9, 27, -3, 15, 42, 24, -4, 20, -30, 54, -4, 46, 43, 10, 1, 59, -4, 3, 57, -2, 19, 20, 61, -15, 24, 16, 39, 18, 18, -21, -5, 42, -37, 12, 15, 21, 6, -18, 4, 39, 30, -6, 38, -26, 63, 29, -17, -27, -33, -6, 12, -8, -3, -44, -14, -36, 0, -20, 35, 86, -31, -2, 14, 8, -5, 11, -32, -6, 20, 2, 23, 6, 67, 0, -71, 8, -2, 25, 4, -20, -4, 16, -5, 12, 0, -15, -39, 31, -28, -33, 43, -18, -22, -2, 18, 9, 12, 45, 0, 73, -2, -16, 15, 35, 40, -27, -5, 30, 8, 21, -12, 41, 29, -24, 62, -10, -10, -29, 20, -39, 20, 69, 56, 52, -8, -11, 22, 63, 9, 13, 
  -21, 73, 14, -5, 49, 51, -7, 20, 34, 5, -10, 46, 6, 19, 14, 15, 72, -6, 22, -38, 28, 37, -9, 55, 21, 10, 5, 0, 4, 21, -12, -18, 20, 34, 24, 38, -21, 11, -40, -7, 23, 55, 11, -7, 13, 41, 34, 21, 40, 29, -9, -8, 45, -23, 5, 61, 34, 38, 0, 37, -1, -8, 6, -29, -25, 10, -4, -38, -40, -9, 26, 54, -17, -21, 12, -22, -22, -38, 1, -28, 11, 43, 13, -41, -45, -41, -2, 14, -16, 81, -44, -19, 34, 7, -15, 70, -17, 41, -30, -17, -10, 4, 45, 12, -27, 25, 60, 54, 9, 18, 2, 2, -11, -5, 33, 13, 3, -8, 42, -26, 67, 60, -16, -13, 24, 6, 31, 64, 6, 55, -22, 60, 32, -41, -8, -2, 11, 8, 36, 58, 23, 24, -1, -33, 51, 24, -19, 2, -4, 22, -8, 26, 58, 12, -48, 39, 17, 10, 26, -37, 
  -18, -23, -28, 26, -10, 26, 34, 8, -6, 17, -21, 12, 17, -16, 13, -11, 13, -1, -17, 1, 20, -42, -4, -9, 28, -44, -42, -36, 2, -32, -36, 4, 1, 40, -13, -23, -31, 39, 14, 24, -26, -10, -19, -3, -33, -51, -10, -18, 2, 20, 35, -3, -35, 23, 18, 1, 35, -11, 16, -15, 3, 10, -40, -27, 23, -1, -19, 17, -33, 30, 7, 14, -5, -7, -5, 3, 0, -21, -1, -27, -20, -38, 15, 12, -32, -40, -15, 27, 25, -15, -43, 10, -12, -40, -27, 22, 14, -30, -37, 3, -5, -35, 0, -36, 10, -19, -41, -30, -16, 11, -37, 1, 8, -1, 11, 12, -16, -19, 13, -24, -1, -44, 12, -19, -40, -23, -23, 36, -28, 19, -21, -8, 26, -37, -21, -26, 2, -1, 33, -16, -18, 26, 26, -40, -46, -12, 18, 15, 12, 18, -48, -12, 14, 29, -11, -29, -33, 28, -45, -6, 
  13, -32, -52, -15, -3, -34, -17, 52, -7, 0, -39, -23, -16, -33, 35, -22, -9, -4, -35, 21, -74, -49, 6, -81, -29, -12, 16, 4, 24, 13, -15, -25, -43, -67, 11, 26, 16, 14, 48, -12, -59, -16, 13, 10, -45, 14, 11, -30, -15, -62, -37, -14, -40, -22, 0, -57, -46, -45, -17, 37, 8, 40, 24, -9, -43, -47, 33, 19, -28, 46, -63, -18, 19, 34, -42, -1, 2, -3, 29, 58, -24, -17, -37, 64, 16, 40, -68, -72, -87, -83, 74, -19, -24, 19, 37, -29, -15, -83, 70, 50, 11, -21, -65, 28, -7, -16, -57, -45, -15, -22, 5, 10, -13, 39, 51, 18, 13, 23, -26, -17, -66, -5, 2, 28, -92, -10, 67, -10, -45, -42, 44, 7, -31, 51, -29, 52, 0, -4, -28, -34, -67, -1, 48, 9, -6, 56, 7, -6, 19, 21, -16, 1, -3, -25, 33, -14, -68, 12, 32, 17, 
  -42, 41, 43, 33, 24, 13, 56, 5, 17, 59, 37, 20, 66, 19, 24, 49, 50, 13, 79, -28, 57, 11, 23, 73, 40, 51, -21, 16, 43, -9, -4, -16, 7, 48, 29, 37, -32, -19, -12, 27, 36, 52, 7, 27, 34, 44, 41, 14, 46, 51, -33, -12, 35, 0, -16, 4, -33, 37, 23, 20, 29, -26, -24, -46, -1, -11, 13, -27, -14, -62, 28, 33, -15, -41, 29, -29, 9, -20, -26, -23, 2, 38, -6, -51, 11, -35, 55, 17, 22, 55, -28, -20, -19, 50, -18, 31, -42, 29, 4, -47, 46, -19, 52, -4, -33, -5, -20, -1, 20, 19, 7, -9, 14, 5, 0, -9, -31, 33, 64, -20, 54, 22, -28, -1, 36, 7, -21, 6, -5, 33, -3, 49, 1, 31, 37, -27, 37, -19, 37, 22, 9, 61, 17, 7, 65, -48, 27, 41, 22, 42, 15, 17, 84, 9, -48, 37, 73, 5, 5, -7, 
  48, -24, -27, 24, -68, 17, 42, 21, 55, -52, -44, 10, 30, 10, -8, -29, -32, 21, -16, 10, -8, -16, -7, -44, 14, 4, 44, -6, -7, 25, 2, 42, -64, 34, 65, -17, 72, 16, 43, 9, -37, -53, 25, 8, 35, -26, 0, -18, -41, 8, 19, -13, -52, 34, 7, 10, 28, -65, 21, 19, 11, 32, 2, 42, 24, 0, 64, 12, 10, 16, 11, -24, -22, 33, -30, 62, 40, 69, 21, 76, 21, -5, 19, 18, 41, 14, -37, -40, 25, -16, 70, 43, 32, -42, 53, -53, 37, -2, 16, 23, 0, 18, -53, 23, 72, 4, -14, -39, -52, -33, 74, 12, -14, -1, -26, 37, -24, -25, -33, -23, -62, 10, 11, 35, -28, -11, -4, -21, 12, -33, -4, -35, 14, -3, -21, 9, -44, -32, -28, -38, 29, 1, 25, 13, 17, 9, 17, 3, -15, -12, 6, -48, -35, -62, 33, 29, -54, -6, 18, 39, 
  103, 15, -27, 1, 1, 14, 21, -6, 9, -39, 6, -10, 42, -23, 32, -38, 45, -15, 46, 37, -48, 16, 1, -37, 51, -9, 27, 8, -23, 32, 7, 39, -39, -36, 49, -8, -17, -14, 31, -16, -42, -31, -41, -19, 23, -15, 15, 21, -25, -62, 39, 54, -2, 10, -26, -79, 52, -71, 12, 59, -19, 49, 23, 28, 3, -83, -14, -3, -66, 3, -86, 23, 25, -17, -124, 5, 13, -17, 63, -4, -50, -51, -53, 72, -30, 18, -125, -56, -92, -65, 76, 29, -76, 45, 35, -113, -9, -39, 6, -5, 30, 45, -49, -17, -20, -23, -64, -68, -30, -41, 45, -7, -56, -15, -34, 40, 5, -12, 11, -12, -60, -38, 22, 38, -94, 21, 3, -27, -35, -18, 44, 40, 33, 37, 21, 53, 25, 24, 36, -7, -48, 13, 11, 43, -41, 4, 11, 53, -49, 23, 33, 2, -46, -1, 79, 31, 0, 15, 16, 60, 
  83, -40, -12, -8, -73, 14, -31, 10, 37, 16, -16, -52, 5, -1, 20, -40, -43, 7, -12, -23, -5, 8, -11, -74, -22, 9, 60, -19, 16, -9, 9, 3, -23, 6, -18, -27, 45, 3, 46, -64, -21, -39, 13, 42, -39, -21, -41, -30, -11, 6, 21, -4, -49, 7, 32, -40, 18, -18, 46, 37, 12, -18, 45, -24, -37, -19, 12, 25, 36, 24, -46, -26, -13, 43, -53, 33, -7, -5, 79, 62, 14, -13, 34, 78, 29, -12, -20, 26, -25, -44, 83, 1, 30, 28, 55, -43, 16, -53, -15, -4, -4, 33, -25, 37, 79, -11, -41, -50, 9, -13, 25, 27, 11, -18, -32, 28, 40, 11, -68, -39, -8, -10, 56, -6, -58, 13, -2, 3, -3, -35, 13, -30, 10, 49, 34, 27, -17, -36, -28, -54, -36, 16, 4, -26, -33, -17, -23, 3, -32, -9, -3, -2, -1, -41, 40, -16, -22, 54, 41, 58, 
  -42, 46, 8, -21, 14, 37, 0, 22, -5, -14, -31, -32, 36, -27, -21, -35, 28, -11, 23, -5, -34, -28, -25, -17, 4, 13, -54, -14, -37, -71, -16, 3, 11, -34, -35, -29, 9, 19, 5, 37, -32, 37, 19, -41, -19, 19, 20, -24, 9, -24, -37, 27, 46, -38, -17, -42, -22, 4, 11, 30, -23, -45, -4, -11, -16, -12, -39, -3, -50, -23, -29, 45, -19, 20, -28, -18, -49, 5, -37, -43, 3, 33, -25, -28, 39, -39, -35, 27, 3, 2, -9, -29, 10, 13, -50, 22, 3, -10, 1, 5, -20, -37, -17, 6, -45, 14, -22, 23, -4, -3, 10, -32, 25, 46, -47, -40, -18, -34, 19, -3, -36, -6, 13, -61, 36, -6, -42, 26, -1, 43, 7, 9, 35, -57, -38, -29, -58, -29, -14, 7, -27, -31, -14, 9, 14, -54, 13, -33, 26, 6, -26, 15, 53, -26, -25, 22, 37, 18, -19, -31, 
  -16, 69, 41, 0, 54, 16, 59, -24, -58, -1, 5, 66, 65, 13, 35, 26, 32, 1, 38, 40, 1, 59, 49, 93, -21, 21, -14, 20, 36, 40, 40, 39, 28, 35, 11, 35, -55, -2, -27, 21, -7, 16, -35, 3, 58, -15, 15, 44, 2, 10, 26, 10, 21, -10, 33, 45, -29, 16, 4, 42, 41, -15, 22, -53, 31, 5, 18, -31, 29, -26, 47, 34, 8, 11, -20, -16, -55, -17, -10, -17, 32, 20, 5, -52, 12, -25, 56, -5, -6, 61, -59, -34, 37, 41, -46, 17, -44, 39, 23, -10, -5, 42, 44, -5, -67, 14, 34, 48, -8, 5, -44, -24, -41, 29, -17, -1, -22, 46, 63, -4, 58, 29, -6, -28, 27, 49, -22, 5, 6, 51, -21, 53, -14, 28, 46, -4, 62, 32, 45, 72, 29, 67, -50, -15, 41, -13, 13, 19, 6, 34, 27, 8, 60, 77, -45, -10, 61, 28, 19, -27, 
  59, -29, 14, 14, -21, -2, -9, 46, -14, 12, -16, -62, -25, 6, 16, 11, -24, 22, -69, 36, -18, -54, 32, -75, -2, -50, 54, -29, -33, -56, -45, 1, -49, 10, 26, 18, 40, -39, 24, -23, -38, -14, 18, 32, 26, -34, -23, 10, -41, -46, 17, -23, -17, 22, 0, -4, 3, 3, 22, -28, -29, -14, 20, -11, 22, -36, 41, 54, 22, 59, -8, 2, -6, -4, 3, 31, 32, 22, 13, 53, 20, 13, -7, 45, 22, 43, -51, -60, 26, -83, 23, 56, -41, -42, 60, -25, 51, -49, 36, -15, -23, 17, -17, -14, 14, -24, 3, -20, -28, 14, 56, 45, 12, 29, -19, -34, -20, 18, -37, -5, -51, 2, 53, 0, -53, 31, 49, -6, -1, -65, -18, -29, -37, 6, -33, 17, 9, 14, -9, -33, -55, 22, 37, 3, -40, 30, -31, 38, 5, -34, 12, -38, -56, -57, 16, -8, -23, 24, 40, -2, 
  -51, 44, 16, 38, 42, -1, 58, 11, 12, 13, 60, 41, 54, 20, 48, -1, 61, -6, 28, 11, -1, 41, 34, 37, 40, 50, -20, -6, 15, -3, 43, 32, 17, -7, 27, -6, -78, -13, -19, 28, 37, 56, -5, 37, 70, -5, -8, 12, 12, 10, 10, -2, 22, 1, -28, 14, -9, 38, 8, 7, 30, 59, -19, -32, 48, -3, -24, 5, 5, 15, 15, 37, 9, -1, 24, -2, -8, -17, -26, -29, 0, 41, -38, -66, -10, -6, 20, -5, 12, 26, -34, -4, 26, 26, 10, 33, -4, 18, -9, 7, 32, 19, 22, -26, -2, 1, 38, -18, 27, -3, -45, -7, 34, 12, 15, -28, 2, 7, 55, -26, 46, 40, -31, -32, 19, -36, 26, 58, -38, 66, -3, 39, 13, -20, 10, 2, -7, 42, 14, 32, 21, -1, -5, 20, 1, -12, -6, 26, 27, 6, 1, -4, 75, 29, -15, -5, 46, -12, 15, -16, 
  35, 27, -17, -30, 35, 28, -38, 29, -25, -26, 1, -36, 19, 25, -12, -28, -24, -14, -2, 26, -14, -19, 28, 6, -19, 4, -39, -11, -26, 14, 10, -1, 15, 0, 1, -38, -16, -12, -28, -23, 4, -4, -25, -27, 4, -27, 30, -27, 11, -37, -4, 27, 18, -39, 21, -21, 11, -32, -13, 1, -10, 31, -28, -3, -15, -25, -26, -32, -18, 9, 9, 6, 4, -4, 25, -29, -1, 10, 26, -11, -19, -5, -39, 3, -30, -30, -42, 16, -35, -42, -19, -33, 14, 38, 19, -19, 1, 2, -14, -43, 27, 18, -14, 15, -12, -35, -19, -30, -35, 15, -29, 24, 5, 18, -42, 17, 18, 4, -41, 11, 18, -20, 10, -24, 15, -6, -28, 24, -44, -28, -5, -38, -2, -6, 18, -12, -3, 17, 10, 9, -9, -36, 31, -30, -12, -4, 20, -14, 19, -4, -9, -23, -25, -39, -26, 9, 18, -26, -43, 11, 
  16, 65, -5, -6, 25, -14, -7, 18, -18, -9, -27, 32, 38, 38, -25, 35, 51, 24, -3, 18, 26, 20, -21, 62, 16, 65, -2, 12, 9, 49, -1, -18, 26, 1, -37, 33, -24, -10, -47, 49, 66, 3, 7, 30, -13, 19, 13, -5, 43, 6, -28, 27, 54, -31, -19, 33, 2, 6, 26, -25, 38, -27, -17, 16, 19, -1, -18, -46, 14, 19, 23, 1, 23, -6, 29, -9, -17, -62, -9, -12, 31, 13, -7, -39, -15, -5, 31, 28, -10, 56, -14, -53, 16, -5, 16, 56, -57, 5, -16, 1, 3, -46, -1, -31, 9, 5, 5, -14, 30, 33, -5, -23, 34, -34, -16, -31, -17, -49, 25, 23, 51, 43, 3, -27, 47, 4, -10, 36, -34, 31, -33, 42, 51, -9, -14, -15, -20, 45, 17, 2, 36, 18, -1, -11, -11, -49, 1, 34, 25, -6, -10, 1, 20, 58, -32, 40, 30, 32, 3, 11, 
  16, -57, -19, 6, 5, -33, -2, -37, -13, -4, 5, -44, -25, -35, 20, -32, -7, -15, 5, -16, -11, 2, 0, -72, 12, -9, 39, -23, -6, -49, -30, 19, -49, 22, 35, 1, 48, 42, 66, -19, -18, -39, 28, -17, 32, 6, 16, -2, -13, -23, 6, -45, 1, -4, 53, 0, -6, -38, 16, -28, -18, 14, 35, 24, -6, -2, 9, 16, 1, 74, -46, 0, 16, 32, 30, 54, 18, 41, 52, 0, 4, -4, 38, 2, 64, -12, -45, -23, 63, -38, 23, 41, -4, 0, 2, 16, 72, -29, -30, 0, -26, 6, -40, 44, 46, 7, -48, -59, -7, 30, 32, 3, -10, 19, 63, -26, 59, 5, -5, 34, -69, -12, 16, 55, -20, -64, 8, -41, -14, -15, -9, -22, -6, 12, 9, 6, -23, 35, 16, -58, -21, -10, -35, 57, 6, -7, -9, 14, -17, 13, -12, 7, 30, 20, -4, -24, -8, -50, -4, -27, 
  24, 48, 24, -15, 25, 6, 24, 8, 14, 3, 39, 25, 42, 8, 16, 19, -12, -11, 9, -3, -23, -5, -28, 49, 9, 23, -24, 38, 34, 37, 19, -10, 42, 25, -26, 17, -60, 47, -72, 41, 22, 12, -42, 10, 15, 29, 32, -9, 1, 3, 35, 4, 81, -11, -22, 8, -36, 15, 25, -15, 21, 1, 1, -30, 19, 52, -34, -56, 27, -35, 9, 53, 7, 5, 62, 11, -58, -23, -55, 1, 46, 35, 12, -20, -10, -37, 44, -7, 5, 70, -4, 9, -14, 32, -32, 10, -68, 53, -46, 23, 27, -26, 74, -39, 0, -49, 22, 8, -12, 49, -57, 14, 21, 12, -17, 23, 14, -10, 40, -27, 47, 37, -11, 4, 59, 20, 15, 2, 28, 62, 27, 34, 8, -40, 27, -48, -11, 65, -2, 58, 24, 19, 8, -31, -7, 5, -14, -6, 37, -20, 38, 61, 64, 66, -2, 46, 37, -18, 43, 18, 
  -43, 11, 19, -6, 15, -2, 11, -26, -42, 28, 22, 37, 6, 15, 11, 44, 81, -11, 76, -20, 36, 9, -16, 110, 17, 20, -12, 35, 42, -12, 46, -12, 3, 19, 37, -8, -18, -23, -8, 18, 20, 15, -13, -19, 14, 32, 51, 0, 27, 49, 29, 46, 31, 35, -5, 5, 38, 19, -22, 12, 45, 26, 10, 12, 2, 61, -12, -13, 5, -24, 25, 15, 19, -5, 39, -15, -24, -51, -47, -59, 30, 48, -30, -55, -3, -25, 46, 16, 18, 40, -58, -26, 21, 57, -48, 58, -55, 65, -40, -19, -13, -11, 39, 19, -55, -45, 22, 10, 16, 38, -50, 4, 19, -23, -6, -35, 3, 24, 35, -22, 67, 33, -10, -28, 16, -52, -24, 70, -22, 35, 26, 42, 4, -2, 42, -56, 26, -8, 33, 70, 39, 0, 7, 15, 32, 14, 37, -17, 45, -15, 1, 11, 42, -1, 5, 32, 47, 25, 51, -18, 
  23, -43, -14, -31, -59, 20, -23, 2, 48, 3, 9, -13, -48, -55, 33, -50, -74, -4, -28, -31, -39, -66, -25, -121, -21, -63, 44, -2, 16, -58, 13, 17, -70, 19, 40, -9, 95, -42, 78, -49, -73, -5, 41, 10, -27, 16, 14, -23, -24, -67, 12, 6, -47, -14, 25, 4, 21, -43, 39, 16, -15, -10, 25, 15, -32, -14, 35, 42, 47, -8, -33, -4, -52, 57, 10, 46, 23, 54, 46, 68, 8, -28, -14, 43, 24, 32, -37, -23, 16, -49, 28, 59, 37, 7, 63, -5, 50, -51, -9, 17, -39, 42, -7, 48, 66, 4, -31, 25, -22, -4, 55, -3, 7, 25, -9, 26, 54, 22, -62, 39, -60, -26, 43, 39, -19, -37, 11, -74, 15, -36, 27, -11, -60, 7, 11, -6, 15, -32, -23, -6, -53, 10, 36, 19, -7, 52, -41, -19, 10, 26, -38, -58, -51, -72, 15, -11, -66, -2, -7, 16, 
  -22, 3, 24, 7, 14, 0, 5, -39, 7, 24, -29, -19, 0, 9, 12, -29, 15, 0, -16, -24, -31, -42, 33, 34, 0, -23, 24, -15, 27, 29, -43, 2, -26, -34, 32, -25, -6, 16, 17, -12, 25, 23, -34, -2, 29, -42, -32, 2, -41, 5, -19, 16, -43, 15, -2, -34, -32, -33, 8, -1, -15, -25, -20, -4, -38, -29, -40, -39, -3, 18, 8, -20, 30, -42, -24, 5, 25, 10, -5, 14, 20, 6, 4, -3, -5, 22, 24, -35, -7, 14, 13, -7, -7, -31, 9, -8, -20, -22, -6, -43, -28, 11, 10, 8, -8, -31, -32, 1, 9, -8, -18, 22, -37, 6, 1, 27, -29, -41, 6, -10, -5, -3, -8, -47, -18, -24, 0, -42, 14, -3, -2, -49, -2, 31, -21, -36, -43, 3, -27, -25, 2, -31, 15, 22, -23, -34, 16, 19, -16, -32, 14, 4, -2, -36, -9, -9, -38, 29, 21, 30, 
  42, -26, -38, -12, -5, -13, 30, 15, 11, -16, 4, -57, -39, 24, -5, -28, -10, 42, -58, -31, -32, -23, -20, -36, -31, -17, 32, 9, -42, -12, 7, -18, 14, -29, -4, 40, 24, -22, 64, 30, -54, -3, 33, 41, -19, 5, -7, -11, -21, 3, 21, 3, -58, 15, 4, 3, 34, -10, 51, -17, -36, -5, 0, 21, -44, -63, 66, 9, -7, 36, -29, -45, -38, 0, -29, 8, 8, 44, 46, 47, -8, -38, 55, 42, 31, 36, -63, 7, -11, -33, 75, 7, 8, -8, 68, -21, 7, -39, 12, 25, -25, -16, 2, 7, 46, 5, 4, -32, 21, 15, 71, 7, 14, 44, 32, -13, 29, -6, -48, -27, -77, -43, 22, 65, -29, 28, 32, -14, 26, 8, 32, 22, -51, -2, -28, 63, 38, 24, -15, -62, -54, -12, 77, -19, -48, 7, -3, 6, -19, -19, 23, -11, -68, -52, 17, 6, -35, 32, 13, -1, 
  -47, 68, 32, 59, -15, 32, 5, 35, -6, 2, 40, 69, 44, 47, 9, 14, 17, 32, 41, 7, -2, 36, 43, 68, 13, 10, 34, 28, -10, 15, 25, -24, 55, -14, -31, -25, -75, 22, -22, 51, 36, 65, -16, 11, 26, 1, 25, -42, 1, 65, -49, -14, 15, 4, 32, 62, 24, 80, 0, 29, 52, -3, -45, 38, -40, 13, 1, -28, -17, 20, 4, 17, 1, -29, 8, -34, -51, -41, 3, -12, 46, 63, 1, -18, -16, -16, 28, 6, -15, 28, -60, -34, 33, 46, -31, 78, -35, 31, -57, -3, -11, -44, -1, -44, -6, -21, 32, -3, 32, 2, 11, -39, -9, 10, 8, 35, 28, 8, 7, 21, 78, 29, 14, -36, 64, -20, 20, 74, 17, 12, -10, 54, 14, -5, -16, -17, -33, 26, 15, 7, 16, 22, 14, -18, -18, 16, 34, 6, 14, 29, -7, 37, 33, 6, -1, 28, -1, 16, -11, 16, 
  -43, 41, 22, 27, 43, -23, -11, -24, -45, -13, 4, 32, 25, 32, 40, 12, 30, 32, 57, -43, 44, -2, 5, 80, 19, -13, 29, -6, -31, 6, -16, -27, 58, 39, 33, 22, -59, 17, -15, 62, 25, -3, -29, 26, 5, -49, 4, -39, 29, 15, -26, -11, 47, -28, 31, 18, -10, 74, 16, 19, 4, 11, -21, 27, -14, 11, -10, -46, 5, -29, 19, 40, 37, -57, 20, -25, -47, -8, 1, 8, 12, 45, 13, 4, -44, -33, 34, -17, -25, 88, -37, -32, -5, -5, -20, 50, -40, 30, -14, -30, 16, -49, -4, -41, -57, -31, 49, 13, 43, -28, -20, -5, 3, 26, 2, -40, -46, 19, -8, 35, 33, 4, -5, 1, 32, 15, 16, 59, -20, 42, -14, 38, -10, 23, 45, -34, -4, 7, 21, 29, -6, -1, -25, -27, 40, -22, -26, -15, -32, -28, -14, -3, -6, 45, -20, -33, 22, -15, 15, 18, 
  -37, 9, -30, 25, 33, -38, -36, 40, -23, 10, -14, 1, -3, -33, -3, -5, 37, -41, 27, -25, -15, 37, -10, -19, 7, -13, -12, -28, -23, 9, 17, 7, 17, 1, -38, -3, 4, -2, -9, -10, -6, -30, -6, 24, 4, 9, 21, 0, -36, -36, 26, 29, 10, -36, 5, 36, -24, -31, -39, -16, -33, -22, -25, -27, 28, -35, 11, -20, -5, 28, 13, 32, -41, -31, 6, -28, -4, 11, -6, 18, -28, -29, -6, 17, 19, 15, -36, 23, 7, -44, -18, 0, 9, -19, 22, -6, 13, 11, -29, 4, -31, -13, -43, -13, -33, -33, -13, -30, -1, 10, -27, -5, -20, 18, 14, -24, 4, -23, 19, -25, 18, -3, 20, 8, -10, 33, -18, 3, -7, -3, -22, 4, -6, 25, -23, -38, 2, -32, 0, -25, -34, -8, -28, 18, -27, -20, -20, -26, -23, 16, -25, 15, -25, -6, -48, 2, 36, 3, -1, -24, 
  -11, -59, -38, -26, -49, 26, -16, 49, 50, -19, -36, -46, -27, -40, -17, -53, -43, -29, 2, -10, 9, -10, 19, -44, 50, -28, -6, -6, -38, -3, 17, 1, 2, -10, 39, 5, 39, 13, 58, -14, -24, 12, 31, -17, 1, 4, 2, -14, 19, -7, -25, -31, -64, 11, 29, -2, -14, -45, 26, -18, 24, 70, -10, 16, -1, -40, 49, 38, -40, -7, -39, -42, 31, 53, 22, 10, 13, 30, 48, 55, 16, -38, 17, 75, -2, 29, -1, -21, 0, -61, 34, 58, 9, -6, -7, -48, 4, -60, 49, 36, -20, 40, -65, -22, 42, -23, -38, -32, -45, 27, 57, 12, 26, 6, -33, 35, 46, -34, -3, -27, -35, -48, -2, 20, -27, 31, -14, -30, -16, 0, 17, -43, 13, 22, 0, 1, 32, 13, -33, -60, -58, 6, 6, 19, -32, 15, -43, 25, -9, 28, 31, 4, -60, -54, 8, 21, -62, -33, 45, -4, 
  9, 18, -4, 38, 40, 45, 40, 43, -30, -18, 8, 13, 10, 41, -23, -17, 56, 55, 26, -26, 17, 7, -9, 55, -23, 69, 20, 53, -21, 24, -16, -12, 34, 26, -17, -25, -58, -38, -68, -5, 77, 46, 25, 26, -7, 31, 17, 19, 27, 29, -18, 27, 67, -32, 0, 47, 11, 55, -28, 31, 45, -7, -50, 38, 15, 45, 0, -61, -24, 24, 53, 12, -41, -40, 40, -40, -36, -53, -10, -26, 7, 65, 16, -60, 15, -42, 60, 38, -27, 40, 2, -18, 25, -12, -43, 56, -53, 29, -34, 0, 6, -12, 38, 29, -66, -41, 36, -12, 2, 44, 2, 13, 28, 36, 15, 5, 21, -1, 13, -2, 4, 17, -23, -8, 57, -8, 17, 14, -29, 9, -28, 15, 22, 22, 29, 19, -27, 37, -8, 37, 46, 6, -42, 2, 3, -27, 27, 14, 31, 41, 15, 28, 0, 29, 24, 33, 20, 15, 30, 26, 
  24, 17, -42, -7, 1, -20, -3, -7, 14, -9, 14, -25, 15, -41, 7, 19, 20, 0, -25, 24, 30, -15, 25, -25, -10, 20, -25, 0, 20, 7, -32, 29, -39, 12, -3, 22, 11, -30, -2, -22, 15, 19, -3, -7, -3, -37, -42, -19, -25, -6, -22, -32, -38, -23, -21, -20, -21, -15, -29, 31, -37, -13, -36, 1, -16, -12, 29, -45, 7, -8, -17, -19, 2, 14, -11, 4, 9, -3, -8, -35, -25, -40, -19, 2, 3, -22, 29, -28, 25, -13, 30, -2, -24, 15, -30, -30, -6, -12, -30, -13, -3, 38, -4, -3, -33, -25, -44, 14, 5, 29, 26, 24, 19, -43, 12, 13, -40, -10, -41, -32, -35, -39, 4, -21, -17, -17, 0, -21, 9, 26, -26, 28, 27, 20, 30, -9, 11, -21, -17, 28, -42, 20, -33, -23, -43, -7, -41, 6, -18, -43, -1, 6, -30, 27, 21, 7, 2, -26, 28, -12, 
  34, 27, 34, 8, 26, 23, -26, 25, -5, 30, 11, 17, 20, 9, -23, -20, -16, -9, 6, -29, -33, 37, 12, 24, -38, 20, -27, -20, 16, -19, -27, -5, -21, -22, -34, -28, 12, -15, -9, -29, 23, 8, 9, 28, -12, -3, -39, 27, 6, -38, -25, 14, -19, -24, 27, 7, -22, 23, -25, -18, -6, -35, 18, -7, 31, -15, -43, -27, -31, -27, -9, 4, 23, -30, -27, 17, 27, -41, 19, 19, -22, 20, 13, -43, 34, -22, 15, -22, -20, 19, -33, -32, -15, 23, -4, -10, 11, -1, 26, 8, -41, -21, -32, 23, 11, -8, -34, -22, -9, -10, -17, -36, -18, 30, 2, 3, -37, 10, 23, -41, 38, -19, 13, 3, -9, -20, -29, 39, -21, -3, -4, 22, 2, 29, 10, 40, -20, 19, -7, -24, -20, -12, -50, 13, 28, 25, -4, 12, -36, 13, -20, -21, 15, 27, 20, 28, -10, 24, -25, -20, 
  -35, 41, 20, 45, 79, 11, -7, -5, -8, 35, 53, 35, 2, 2, -23, 28, 6, 32, 57, 3, 36, -15, 32, 44, 26, 2, -35, 1, 44, 10, 39, -34, 18, 26, -38, -11, -71, -20, -32, 55, 73, 9, 26, 20, 37, 34, 51, -15, 49, 57, -7, 2, 2, -16, 4, -5, -5, 33, -13, 24, 38, 17, 14, 18, 7, 34, -3, -40, -42, -55, 2, 42, -16, 8, 11, -8, 9, -64, 5, -59, 14, 63, 14, -4, 2, -16, 22, 6, -27, 71, -49, -56, -18, 15, -45, 60, -67, 63, -47, -17, 3, -32, 37, -15, -31, -12, 62, 49, -23, 36, -52, 1, 36, 23, -16, -2, 17, -11, 17, 32, 56, 44, 26, -39, 2, -33, 8, 4, 38, 40, -37, 31, -9, -36, 4, -13, 10, 24, 45, 41, 17, 38, -15, -29, 33, -23, -16, 27, 46, -16, -20, -17, 32, 54, -30, 36, 16, -19, 44, 2, 
  -19, -3, 1, 37, 8, 36, 33, -10, -19, -1, 56, 38, -11, 6, 23, 50, -10, 48, 41, -27, 47, 35, 4, 77, -5, -1, 28, 40, -22, 21, 20, -29, -9, -20, -18, -25, -75, 1, -65, 12, 39, 41, 4, -2, -3, 8, 37, -15, 36, 7, 4, 58, 59, 5, -17, 30, 0, 53, -17, -33, 13, -21, 26, 16, 9, 9, -36, -43, -1, -58, 24, 28, -54, -16, -3, 1, 6, -54, -56, -33, -28, 33, -5, -29, -62, -2, 28, 24, 9, 76, -23, -27, -4, 40, -25, 40, -15, 46, -11, -26, 7, 10, 5, 2, -10, 3, 34, 23, 36, -3, -54, 14, -13, 13, -20, 26, 11, -12, 23, 22, -2, 41, -16, 3, 27, -19, 13, 29, 4, 46, 5, -28, 23, 8, 9, -7, 25, 33, -12, 32, 27, 31, 7, -33, 19, -33, -14, 25, -2, 30, 20, -6, 3, 12, -26, -17, 31, -26, 24, 41, 
  7, 42, 6, 20, 24, -11, 15, -15, -30, 53, 8, 72, 67, 11, -15, 45, 69, 55, 65, 26, 31, 45, -18, 21, -4, 48, -2, 24, 4, -15, 22, -5, 12, 0, -22, 49, -56, -23, 0, 34, 30, 33, 13, -27, 7, 47, 55, -1, 55, 26, -21, 46, 33, -2, -8, 6, 44, 42, 29, 44, 49, 8, -17, 2, -16, 2, -2, -45, -22, 24, 48, 54, 6, 15, 53, -9, 8, -24, -46, 3, 50, 12, -2, -1, 3, -17, 53, -3, -32, 30, -54, -43, 36, 1, 1, 43, -33, 61, -38, -1, -5, -37, 66, -8, -48, -5, 37, 31, 36, 16, -36, -12, -28, -29, -2, 3, -1, -16, 3, -28, 65, 47, -29, -1, -5, -20, 18, 20, 28, 69, 10, 1, 39, -6, 39, -7, -19, 4, 21, 53, -6, 15, -41, -44, 49, -5, 33, -10, 40, -25, 29, 51, 41, 1, -8, 23, 6, 19, 42, -20, 
  -66, 26, 54, 4, 68, 14, 62, 4, -7, 66, 23, 9, 12, 18, 5, 55, 42, -6, 31, -36, 10, 33, 6, 98, -2, 11, -15, -1, -5, 28, 22, -12, 9, 20, 4, 32, -47, -36, -57, 56, 91, -3, -31, -1, 8, -25, 33, -10, 56, 60, -15, 20, 72, -4, -11, 12, 1, 77, 27, 0, -7, 1, 7, -19, 16, 29, -3, -8, -38, 24, 15, -6, 17, 13, 33, -6, -21, -56, -8, -52, 29, 36, -46, -33, -13, -35, 32, -12, -37, 78, -55, -3, -23, 0, -8, 51, -31, 20, -23, -17, -13, 0, 63, -45, -16, -34, 36, 52, 22, -1, -5, -21, -16, -26, 48, 16, -40, 17, 36, 31, 52, 6, -51, -16, 72, 12, -9, 69, 18, 37, 12, 53, 56, -54, -6, -12, 27, 56, 33, 59, 46, -1, 5, -25, 7, 16, -15, 10, 41, -11, -14, 38, 49, 24, -31, -12, 68, 36, 24, -2, 
  19, -32, -5, 2, 0, -9, 17, 4, 1, 27, -36, -29, -12, -43, -5, 14, -41, 5, 11, 8, 4, -48, -9, -4, -22, -3, -31, 29, -40, 16, 18, -35, 22, -27, -17, 22, -10, 16, -11, -37, -44, 22, -5, -12, 11, -8, -30, -18, 17, 35, -18, -5, -25, -22, -21, 24, 14, -45, -15, -8, -3, 13, -9, -29, -15, 1, 33, -7, 27, -20, -37, 22, 28, -25, 4, -19, -9, -46, 25, -30, 1, -9, -39, -3, 26, -42, 29, -8, -22, 6, 8, 26, -16, -17, -39, 4, 10, -5, -12, -25, -31, 19, 8, -5, -12, 4, -2, 24, -50, -5, -28, 2, 12, -11, 8, -23, -2, -8, 14, 13, -43, 13, -23, -22, -34, -31, -1, -19, 20, -6, -36, -36, -35, 19, -22, -2, 10, -40, -7, 26, -16, 19, 13, -15, -12, -21, -16, -34, 4, -22, 1, -4, 26, -19, -5, 3, 22, -20, 7, 34, 
  28, -39, 35, 2, 1, 39, 26, 8, 3, -22, 27, -58, 64, -42, 62, -17, 11, 73, 11, 51, -18, -38, 77, -37, 24, 32, 21, 74, 70, -1, 26, 6, -46, -65, 26, 80, -21, 2, 75, 42, -49, -31, -5, 31, -12, -44, 5, 9, 17, -25, 20, 55, -16, -13, 85, -23, 107, -2, 4, 42, -32, 65, 68, 25, -44, -14, 12, 127, 26, -1, -45, -5, 29, -28, -77, -7, 121, -50, 31, -7, -79, -34, -5, 120, 12, -9, -58, -66, -80, -45, 5, 53, -83, -40, -19, -72, -22, -36, 65, -1, -32, 31, 12, 44, -8, 18, -52, -39, -40, 35, 82, 34, 1, -12, 17, 18, -63, 13, -14, -4, -20, -28, 49, 41, -88, 53, 67, -13, 7, 40, -10, 89, -34, 23, 54, 55, 2, -26, -6, -46, -33, -10, 17, 19, 32, 42, 18, 46, -40, 7, 45, -21, 78, 7, 37, -10, 6, 55, 30, 9, 
  8, -19, -28, 27, 8, -13, 3, 35, -10, -67, 6, 9, -15, -52, -31, -34, -55, 28, -24, 34, -29, -49, 26, -89, 8, -38, 42, 4, -6, -47, 6, -17, 1, -25, 26, 8, 5, -1, 38, -20, 2, 10, -4, 2, 11, -7, -40, -16, -40, -62, 20, -20, -46, -18, 47, -64, 44, -46, 11, -8, -30, 13, 24, -24, 9, -15, 38, 40, -6, -13, -39, 0, -32, 55, -26, 19, 52, 56, 34, 41, -31, -12, 39, 24, -36, 11, -58, -23, -42, -65, 89, 3, -30, -30, 47, -66, 19, -13, 7, 31, -41, -7, -7, 8, -25, 27, -56, -37, 9, -53, 38, -6, 17, 12, -26, -16, 27, 2, -66, 4, -40, -9, 38, 2, 0, -4, 30, -28, -16, 14, 29, -14, -44, 41, -7, 38, 26, -13, -56, -30, -37, -11, 54, -19, -1, 11, 18, -19, -6, 47, 5, -32, -22, -18, 31, 10, -33, 0, 0, 3, 
  1, 24, 34, -3, 7, -4, -28, 2, -6, -27, -38, 41, 47, -24, -1, 52, -11, 54, 41, -42, 13, 50, -21, 35, -17, 57, -5, 40, -22, 5, 29, 34, 16, 5, 3, 22, -77, 34, -36, 15, 12, -9, 10, 24, 29, -4, -14, -11, 11, 42, -33, 39, 0, 12, -8, 6, 16, 73, -23, 10, -13, 10, -50, -47, -4, -2, 0, -50, 21, 6, 74, 51, -25, -41, 23, -54, -60, -56, 4, 2, -10, 58, 22, -73, -39, -22, -4, -3, -7, 59, -21, -15, 28, -12, 15, 58, -11, 72, -5, -11, 35, -15, 60, -4, 22, -8, -7, 39, 13, -23, 22, 14, 24, -46, -3, -11, -2, -19, 19, -31, 60, 49, 7, 15, 12, -35, -24, 19, -7, 34, 18, 0, 27, 10, -7, 29, 17, 43, -19, 58, -9, 38, 21, -16, -28, -44, 1, -8, -2, 19, -14, 28, -8, -23, 2, -21, -3, -13, -5, -4, 
  26, 45, 58, 32, 3, 29, 66, -10, 12, -1, 26, 31, 14, 11, 3, 5, 54, 28, 13, 2, -12, 3, 35, 3, 7, -7, 25, 37, 44, -7, 14, 4, -1, 21, -24, 43, -45, 50, 9, -16, 18, 12, 15, -17, 46, 32, 1, 1, 12, -13, 41, -1, 73, 19, -33, 10, -9, -16, 0, 1, 30, -4, -4, 28, -6, -33, -4, -35, -39, -27, 20, -20, 32, -23, -35, 8, -13, 19, -16, -37, 25, -34, -19, -54, 6, 0, 0, 21, -4, -46, -44, 7, -35, 8, 11, -19, -26, 8, -4, 1, 22, 47, -9, 2, -24, -6, -30, 4, -18, 33, -31, -8, -36, -14, 6, -10, -31, 17, -11, -27, 27, -14, 3, 5, 1, -23, -12, 41, 22, 52, -11, -8, 14, 40, -31, -13, 17, 23, 3, 20, 57, 60, -12, 37, -6, -19, 25, 20, 4, -19, -9, 11, 14, 50, -29, -9, 5, 6, -27, 26, 
  47, -37, -50, -40, -65, -30, -36, 2, -14, -8, -32, -9, -38, -8, 39, -32, 12, -26, -22, 18, 4, 18, -39, -48, -2, -61, 67, 10, 4, -47, 25, 10, -1, -1, 15, 43, 67, 26, 38, -6, -34, 14, 36, 50, -39, 22, -17, -17, -18, -74, 4, -27, -54, 31, 13, -22, 10, -8, 43, 39, -21, 29, 78, 27, -12, -16, -8, 52, 5, 58, -31, -6, -27, 3, -9, 16, 39, 78, 72, 13, -38, -19, 50, 78, 38, 45, -29, -24, -1, -52, 99, 39, 22, -13, 73, -21, 32, -10, 32, 54, -21, 25, -5, 40, 17, 10, 1, -20, -37, -41, 65, -20, -14, 1, 22, 25, -9, 46, -48, 13, -5, 25, 70, 7, -56, -60, 51, -33, 17, 11, -6, 11, -45, 5, -36, 37, -15, 22, -33, -38, -35, 2, 16, 12, -19, 66, -17, 21, -23, 41, -39, -24, -51, -12, 54, 13, -69, 11, -10, -4, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 64,160 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0042588389478623867, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[2*64] = { 
  37, -56, 64, -11, -100, -95, -7, -21, 12, -36, -52, -49, 84, -112, 60, 26, 80, 47, -84, -31, -113, 24, 41, -41, -17, 30, 85, 35, 94, -22, -87, 97, -51, -113, -47, 13, 12, -65, 46, 0, 75, -79, 6, 58, -76, -15, -101, 61, 91, 46, -22, 72, -38, -4, 57, 49, 46, 7, -53, -127, -85, 51, 16, -111, 
  -41, 47, -74, 38, 55, 64, -70, -82, -85, 75, -68, 0, -16, 33, 17, -55, -19, -62, 49, -45, 18, -39, -4, 71, -37, -89, -63, -73, -90, -48, 94, -86, 84, 108, 103, 1, -67, 100, -14, 4, -61, 68, -78, -46, 3, -35, 52, -30, -64, -21, 78, -77, 4, -26, -78, 6, -59, -62, 13, 88, 54, -25, -31, 36, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 2,64 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0049108895473182201, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[16*1*3*40] = { 
  /* [0][0][][] */ -56,-69,42,40,60,-20,-35,-57,-8,-32,-64,-15,57,-106,3,-72,-33,84,0,-17,84,43,-6,33,3,7,-73,-18,-4,6,-97,-1,-58,-88,22,-52,42,-74,-56,-53, -31,-68,4,-4,-87,-99,-67,-69,-115,-76,17,-33,-27,-76,-56,-96,22,-67,55,63,-20,84,29,-80,-96,-61,-74,-60,4,-30,1,-127,-32,11,-31,-15,-46,-77,-51,-23, -54,-33,33,-86,-59,-14,-14,-81,20,-24,-26,33,-27,-68,9,40,46,41,91,96,79,36,25,87,2,18,44,94,100,-3,18,69,4,86,44,12,82,24,11,6, 
  /* [1][0][][] */ 22,-30,26,23,2,22,85,-7,2,33,-59,-43,69,-1,-56,-39,-20,-55,8,7,-62,-18,-47,87,93,19,-2,20,12,10,63,82,99,10,-16,-67,39,-58,-82,52, -108,-13,11,-40,23,-56,52,-69,-29,-71,-68,-95,-30,15,11,-99,47,-30,4,20,-70,-5,44,-21,73,-8,9,31,78,-9,-64,35,127,90,42,54,33,34,81,-18, -45,53,36,60,18,37,-20,59,-3,-54,-41,-99,9,-2,-105,-109,-94,-19,76,3,2,-1,-98,-115,-83,-102,-13,-38,-90,-41,-39,-39,91,-73,59,-36,-70,-51,-87,-63, 
  /* [2][0][][] */ -75,-46,-69,-69,-27,2,38,-29,26,-8,-37,-19,-27,-2,-33,-61,44,-34,-84,-20,-85,-50,-44,-62,-73,73,109,37,44,-12,2,-1,14,-52,-3,-16,2,-18,26,-69, -89,37,26,46,-46,2,12,-12,-61,-36,50,-37,-64,48,-47,-32,28,8,-32,21,29,-17,-30,29,-16,39,-4,71,50,91,127,-5,-35,-107,-16,19,-20,22,1,-103, -11,54,7,60,-17,41,-49,-63,-28,39,-25,-4,-2,16,-11,-61,-69,-50,-30,-20,6,-81,-88,-68,-37,126,35,109,100,126,-73,-73,-96,22,-60,-75,23,-46,18,-35, 
  /* [3][0][][] */ 0,48,127,59,48,80,72,114,79,6,74,117,108,38,15,56,46,-1,-33,21,3,57,68,85,13,-43,9,-2,1,-12,-4,79,1,-2,-10,37,-47,20,-37,36, 30,91,64,66,41,47,82,71,65,62,44,-26,-19,-27,-7,-9,-6,47,-81,42,55,6,62,-40,-14,-38,6,39,81,41,89,48,-58,-87,-66,-54,46,-5,64,45, 10,-4,61,77,-12,-32,42,15,-12,90,37,45,-14,7,56,-35,26,-2,-65,55,42,-19,57,12,-9,79,15,-3,97,22,5,-103,22,-35,-79,-3,96,61,-8,-17, 
  /* [4][0][][] */ 62,-39,54,35,-32,18,-2,-8,42,-24,-1,14,4,-28,39,-16,52,-47,127,-13,-26,-30,32,-15,50,46,-13,4,99,-8,11,-17,51,-14,45,65,-9,80,43,22, -52,36,21,-69,1,16,20,-40,-62,-7,4,32,35,-4,16,-73,-3,3,86,33,36,2,14,-22,-7,30,57,-8,55,11,11,-16,-13,32,27,-45,-44,-61,-10,53, 47,-42,-46,23,-21,-37,-78,25,-78,-87,-55,-30,-27,-91,2,-12,72,19,-46,12,-53,69,89,40,6,28,-32,-26,-64,-60,-91,10,2,78,21,34,26,21,4,68, 
  /* [5][0][][] */ 12,7,-2,-20,20,-4,43,-27,15,-17,2,40,5,50,-6,43,-41,-35,-52,-59,-82,-71,-51,-6,-42,-22,-26,7,51,84,-38,-28,10,39,-61,6,4,32,-52,-7, -16,-28,-8,21,29,-21,13,-7,15,39,0,-8,23,30,23,-31,-35,41,-40,-17,-34,-49,-67,-63,17,-19,30,85,59,-9,60,56,-37,-76,-32,-20,-9,-25,41,-38, 0,4,15,33,-13,40,27,50,53,4,0,6,-24,104,37,66,-27,11,-53,-27,-16,-21,-38,37,34,127,80,58,95,48,-4,-40,-51,-15,-14,-48,-42,56,24,-24, 
  /* [6][0][][] */ -39,-36,8,77,-22,-1,35,44,51,20,-5,27,7,-21,59,-44,-10,9,1,-35,-7,-8,-21,-25,-43,18,5,-73,-86,-123,-58,-18,-108,-74,56,36,-1,7,13,-7, -39,33,16,60,36,28,6,7,-27,15,65,6,-32,56,57,-3,7,50,13,34,-2,-58,-19,-65,-37,32,-105,-62,-79,-108,-92,-17,56,74,39,-8,-51,-16,-18,-21, -26,-46,18,30,-18,-29,48,28,37,-11,-12,53,-45,-17,-34,5,-11,-29,-32,22,13,-37,11,-31,-39,16,37,-71,-68,-48,127,88,23,-20,-68,-43,-38,-47,12,-62, 
  /* [7][0][][] */ -48,-28,13,-25,-17,-54,9,-9,-41,40,46,46,49,-37,46,-55,7,-34,-5,-11,-57,-25,-83,0,32,11,3,50,35,30,-6,91,70,11,6,-17,0,-47,-31,12, -48,-47,29,38,-43,-57,-10,-26,3,-11,20,-13,-25,40,-57,-55,-64,-4,-74,-27,-16,-8,-85,19,-16,17,126,59,47,10,66,35,-54,-38,-8,-6,-9,5,-18,-14, -52,30,59,-30,-32,50,35,-19,40,-16,-7,-29,-17,-13,20,16,13,10,-91,-28,43,-27,49,29,59,20,120,127,6,123,-34,-49,-10,-91,-3,-73,31,-31,55,-46, 
  /* [8][0][][] */ -10,65,-1,46,-21,68,75,-25,5,-15,34,39,68,27,-9,21,-20,40,-43,-69,27,-13,34,-51,-29,21,0,127,0,-70,-78,-76,-111,-47,22,61,35,-9,28,-6, -2,63,48,46,0,22,57,43,-17,86,62,-17,57,-8,67,8,25,13,27,-16,-35,26,22,25,-40,16,-29,36,-56,-10,-100,-84,16,45,50,-1,20,-13,-8,-11, 27,13,45,8,65,19,-39,66,-4,-16,56,30,8,34,54,40,35,8,25,30,-14,43,3,26,9,56,5,-40,-28,-21,88,105,84,-50,-8,-92,-54,-27,-61,4, 
  /* [9][0][][] */ -36,-67,-30,-86,17,-85,9,26,-14,-46,-2,-76,22,-4,44,-60,-38,-49,-27,29,8,38,84,35,127,97,6,31,87,8,81,73,80,6,38,38,22,85,57,10, -41,13,-102,-104,-16,-51,-10,17,-99,-96,-82,-28,-18,-62,-48,5,24,-16,75,-28,-65,-36,-12,-41,-36,-20,9,27,45,53,10,19,22,29,-23,-34,-8,-37,49,-23, 43,-10,14,-34,29,38,-54,-71,31,-62,-45,-75,15,20,-65,47,79,27,39,90,19,27,-24,-29,24,-47,51,-103,-11,-62,9,-37,73,26,83,51,15,-60,51,-26, 
  /* [10][0][][] */ -46,53,-47,45,-31,55,13,-61,-2,38,10,25,-20,-52,-14,12,-48,-52,-36,-16,-14,35,57,-55,1,-12,-45,-92,-71,-29,-69,-10,44,77,-35,-35,-59,-58,13,-4, -57,-8,-43,19,-63,-23,38,-32,1,-21,-25,-4,-16,26,-53,20,4,27,-43,-58,-34,12,41,-16,-43,-91,-53,28,-2,-90,95,47,-26,-127,-24,-79,-38,-40,98,-5, -61,-55,-32,-62,34,-61,-16,34,0,-29,-53,13,-29,56,13,-49,-7,-53,-36,-28,-7,-17,-78,-74,-35,-107,-72,-19,-52,8,59,-26,-65,-65,76,42,75,90,13,-29, 
  /* [11][0][][] */ 33,49,-48,34,15,4,49,-39,-2,-17,52,-27,7,-6,43,3,-26,-11,-19,-73,-33,-42,31,-13,-3,34,-25,75,63,-41,52,-26,6,-7,28,-16,51,0,-36,-23, -47,-50,-34,-4,-39,22,-10,-63,7,52,-11,-74,-28,42,-21,-75,5,22,-43,5,-44,-55,-6,23,20,84,112,5,3,94,91,82,39,-19,-97,-38,-1,-24,10,-56, -19,26,-7,62,-38,29,-19,38,52,2,13,62,12,-40,52,-43,-16,-27,-79,43,-47,22,-43,-6,-30,63,105,127,59,72,-4,59,-61,-84,-85,-39,-71,28,13,-38, 
  /* [12][0][][] */ -52,20,-38,6,9,40,25,-45,-49,-40,-21,-52,12,-46,-52,-51,-35,-112,46,5,9,-41,-28,-71,-19,-65,-35,-54,-119,-29,-127,-19,6,8,62,65,-2,39,-50,-16, -55,9,-43,-38,2,-44,-8,-57,-20,6,-30,-60,-52,13,-61,-24,-12,28,-27,3,-61,23,-12,6,19,-34,-61,-24,-71,-51,110,36,59,20,-84,-92,12,-48,-29,6, -29,35,-5,11,4,34,-74,-38,-50,-57,2,39,-4,39,-67,-13,12,-31,27,46,-10,-34,12,18,-83,-70,-37,-14,-17,-79,17,40,-54,-91,67,-57,-14,61,-16,-74, 
  /* [13][0][][] */ -40,-32,-58,-68,-100,-38,-37,-18,12,5,-22,-60,-63,-57,-13,6,-45,32,-53,-42,-45,56,79,71,57,-45,-35,-19,-52,-61,-30,-15,45,68,101,70,51,45,61,17, -20,-89,-59,36,-84,20,24,40,-50,-27,-60,-60,38,-13,34,-52,-80,-66,35,47,-32,27,-24,79,95,2,42,-10,-5,-52,10,-14,73,-32,-19,36,-11,61,66,93, -69,-1,-15,-107,-91,-127,-33,-127,-21,-29,-74,-57,-87,-63,18,-1,58,-18,-90,-2,57,-16,80,-9,-20,39,2,-21,42,-104,-79,-12,11,10,13,-23,-63,-73,37,-29, 
  /* [14][0][][] */ -45,-64,-19,23,53,19,-25,16,-20,-63,-13,36,-59,-15,-55,-69,42,61,-21,60,-31,40,26,-11,37,25,5,70,42,79,62,45,14,-16,-28,-52,-58,36,39,-19, 33,-24,-46,-5,15,-11,-9,-11,-70,10,-29,-25,-79,-24,-44,-31,24,49,5,4,31,-74,3,-1,-53,15,-35,-127,-2,-33,27,102,53,103,81,-66,-38,-12,28,-51, -104,-83,-30,-29,23,-98,-89,-114,-7,-81,4,-83,-64,-16,-83,30,-28,64,11,32,47,82,-1,14,-32,-57,-3,-67,-29,-42,-75,36,6,31,62,29,6,-43,28,78, 
  /* [15][0][][] */ -31,30,-49,21,25,-21,57,3,3,-70,-24,54,35,-63,44,-40,-35,-54,19,6,-18,48,25,90,55,33,-10,-98,13,-56,-46,21,106,-17,40,-19,29,-50,27,-80, -57,-23,8,51,12,-13,32,28,8,-5,63,-11,42,39,45,-17,29,13,-68,76,-42,62,89,-66,19,9,35,-30,-110,-68,127,39,-41,-62,-49,21,-34,33,60,-10, -19,29,15,-75,33,-70,14,-78,-40,-48,5,43,17,-52,40,-49,25,46,96,78,46,-36,0,-9,25,-38,6,61,-46,92,14,-79,-109,-59,-20,-20,-47,-4,-10,43, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,40 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0024016392417252064, 0.0023110543843358755, 0.0026398466434329748, 0.0029632917139679193, 0.0031179441139101982, 0.0036275805905461311, 0.0032717576250433922, 0.003297997172921896, 0.0032532361801713705, 0.0029535575304180384, 0.0031626182608306408, 0.003435750026255846, 0.0032405788078904152, 0.002794056897982955, 0.0028795914258807898, 0.0029158159159123898, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[32*1*3*16] = { 
  /* [0][0][][] */ -42,12,10,118,97,-29,-56,63,22,107,2,127,29,-47,50,-86, -25,82,-33,-48,-111,-62,46,67,-14,-73,63,11,64,-32,45,-18, -103,-55,-123,-48,-114,15,-42,-55,97,-45,-5,-100,31,-8,-96,-107, 
  /* [1][0][][] */ -59,-66,50,69,-59,4,-30,3,25,7,111,-24,123,-12,10,71, -38,54,52,-51,-23,113,43,33,127,40,-92,-21,0,-22,2,-105, -54,-40,85,58,-9,74,40,65,69,-70,72,66,44,8,-71,2, 
  /* [2][0][][] */ -34,-4,-69,-80,73,-46,-20,-59,-55,-3,-4,-12,36,93,54,-10, 74,-57,-36,-84,41,-12,-12,-66,-21,63,-15,26,-16,3,27,-95, 27,75,-127,-6,-7,-103,-5,-96,-51,23,-104,-58,1,69,72,81, 
  /* [3][0][][] */ -7,-15,17,22,-6,65,-11,70,-36,31,-60,90,-85,-26,69,-81, 7,90,-28,12,1,0,-14,8,-105,78,-115,-31,-127,57,11,2, -67,8,-4,26,22,-92,-54,17,-48,46,56,-32,1,16,40,-1, 
  /* [4][0][][] */ -43,40,95,-76,-117,30,-56,42,75,27,-64,4,-35,-100,-103,-64, 11,-15,101,-127,-41,-48,-46,-31,70,-8,-76,-53,-17,-109,-63,-84, 2,119,112,2,-51,-33,62,41,-11,82,-18,114,-62,75,37,-12, 
  /* [5][0][][] */ 83,-127,24,5,-58,-81,27,-49,-14,45,57,-95,-99,23,-60,-31, 49,48,-19,-102,-29,-70,-49,68,-109,33,-91,-123,-39,16,81,15, -98,52,-11,28,-27,-65,24,-95,16,-46,-52,-50,30,42,-21,-11, 
  /* [6][0][][] */ 93,1,83,-60,19,51,72,-5,47,-25,84,36,96,-22,-92,15, 77,-53,66,94,-68,44,-7,43,29,13,76,2,79,-56,-96,44, 47,-36,111,26,-80,127,7,28,-54,-27,-45,117,-74,55,71,-94, 
  /* [7][0][][] */ -22,54,-63,31,58,-49,46,38,-60,-21,53,-22,31,-39,58,-28, -30,45,-10,-37,40,-64,76,-3,45,43,28,-64,-17,-1,-46,-17, 24,21,-2,-18,-16,31,86,12,65,-64,78,-24,127,-56,-10,43, 
  /* [8][0][][] */ -19,57,-11,27,32,-33,22,42,-2,53,-14,66,-52,-23,57,-19, 28,24,0,-33,-25,-53,-1,38,26,-35,-9,6,15,25,-22,25, -15,-48,-81,-61,14,-16,87,-28,127,-16,-7,-9,122,27,-78,16, 
  /* [9][0][][] */ -22,6,109,-35,-46,127,27,109,-73,28,-36,86,-80,-6,42,-45, -9,7,-1,65,-60,29,22,-48,-65,24,-80,71,-116,-101,95,-3, 58,-106,-7,13,-38,37,-90,-78,-47,29,111,22,63,51,-50,-34, 
  /* [10][0][][] */ -5,9,47,-43,48,52,127,72,84,-19,-8,101,84,24,-63,-19, -9,-51,66,-6,-69,101,-28,41,-67,-41,49,52,79,16,-75,27, 27,41,-31,-43,-5,57,-33,-36,71,2,-15,35,-73,41,35,-72, 
  /* [11][0][][] */ 23,-34,60,45,-44,127,0,75,55,-72,81,118,53,-52,-7,79, -29,55,78,49,5,69,-11,77,-100,0,-14,91,-83,-28,-12,-87, -70,25,-13,-7,31,-46,-58,-66,-14,55,-45,-58,-1,65,38,56, 
  /* [12][0][][] */ 16,-127,97,29,-42,126,35,94,7,-80,-14,47,-30,-37,-8,63, 70,51,90,-18,59,17,-31,-24,-8,88,-17,30,-48,-42,-22,-118, -8,-8,-43,-79,89,11,-23,-25,56,22,-67,60,-12,-52,-6,83, 
  /* [13][0][][] */ 56,-82,-9,9,-82,87,62,-12,-12,-55,-16,89,62,8,15,73, -42,83,0,-24,76,48,-61,56,-35,54,-109,84,-2,-6,127,-32, -62,58,-33,-56,-39,-71,17,5,-55,-20,79,-80,-26,51,58,26, 
  /* [14][0][][] */ -27,87,-40,-10,70,-36,6,44,-85,97,-88,40,-100,89,65,50, -117,80,-89,7,55,-127,-107,54,-39,12,-59,-31,17,72,63,-33, 71,55,-8,8,1,-27,-55,-82,12,-55,86,-111,53,9,-24,-104, 
  /* [15][0][][] */ 111,-39,-20,-45,-8,50,43,95,49,37,-47,3,-8,4,-17,-12, -15,39,-54,8,53,8,-16,57,-77,65,-64,-69,52,117,97,-27, 13,-29,-107,29,84,-62,10,-62,-101,46,15,-8,127,-8,-4,-62, 
  /* [16][0][][] */ -63,58,-12,-1,-4,59,-59,4,-88,55,127,53,23,23,-6,56, -37,9,35,-120,15,85,102,51,63,58,-124,92,73,-15,-45,-71, 3,-34,90,108,30,109,12,75,-44,-30,111,48,52,-119,-77,72, 
  /* [17][0][][] */ 1,-24,-43,-11,-6,4,51,-26,73,36,22,6,53,46,11,21, 19,-9,32,-13,-6,-2,-24,43,-12,32,67,-16,89,-27,-36,28, -24,11,-2,-28,11,1,127,-2,106,-51,-95,49,64,-25,-87,-2, 
  /* [18][0][][] */ 19,-40,70,-127,-54,51,-68,41,-80,-88,0,16,51,27,22,-73, 38,21,-37,-25,3,43,33,48,26,-17,47,-18,47,36,81,-32, 73,-24,-35,74,-39,35,9,6,-6,70,-35,-7,-55,87,56,4, 
  /* [19][0][][] */ 39,-9,27,60,-21,46,5,-36,-93,2,-1,-49,-127,66,-19,15, 41,38,-41,4,0,4,-29,-7,-122,68,3,-88,-4,67,-14,3, 46,-60,0,45,-34,10,-44,-95,-40,41,44,-68,-34,-25,-37,48, 
  /* [20][0][][] */ 22,16,-31,61,-6,9,-77,66,-58,80,67,127,6,24,-4,-60, -19,-1,75,22,-49,119,-10,15,-21,64,-38,90,-22,37,45,-11, 42,26,45,-80,-1,3,65,58,92,-35,-57,35,68,56,-4,28, 
  /* [21][0][][] */ 3,27,89,36,-85,66,21,-78,-50,22,7,47,31,11,-11,7, 39,25,-20,-104,101,37,62,55,-78,127,11,10,62,-7,114,-12, 20,70,-30,-40,-38,-99,-126,-58,20,106,-92,-10,28,115,84,49, 
  /* [22][0][][] */ 1,33,-4,28,-6,-55,65,-106,42,-45,58,-61,70,-51,-23,-57, 0,15,16,-59,-8,-15,89,-72,68,-21,73,60,95,-28,8,47, -67,-21,87,77,-9,6,-64,79,-82,-90,55,37,5,-82,-127,55, 
  /* [23][0][][] */ -43,-26,41,11,-47,-5,48,-89,-59,-1,50,40,1,28,54,-26, 49,48,-13,-30,-46,84,54,-38,127,29,-70,104,65,72,-8,-53, -77,-81,52,48,-47,15,-69,-1,-54,-38,-29,58,43,5,-65,58, 
  /* [24][0][][] */ -43,-24,57,92,-25,117,91,97,6,-46,20,70,34,-16,-81,126, -48,-17,119,86,41,127,12,35,37,77,-77,53,10,-54,-54,-72, 15,-37,31,-10,-13,22,-22,64,-43,12,-56,95,8,-16,-44,-29, 
  /* [25][0][][] */ -44,-34,77,-35,37,-42,112,-22,90,-8,-7,23,84,47,-20,-2, 38,-19,106,42,-33,58,-3,65,-47,-14,86,76,5,-59,-39,80, -59,-49,82,-52,22,-4,79,-41,112,-24,-127,9,61,46,25,-46, 
  /* [26][0][][] */ 29,-3,-56,52,20,37,-13,-26,-35,-49,-41,-28,-20,48,-10,1, -54,22,-89,-1,80,-70,-56,46,-72,79,-47,7,-113,3,36,-60, 29,-17,-127,-52,-22,-37,-52,-18,-50,-32,57,-109,-41,24,54,59, 
  /* [27][0][][] */ -16,60,-48,22,71,2,-37,82,-19,57,-127,47,-48,38,72,-16, -41,59,-26,-59,-35,-49,-12,19,-104,76,-31,-50,-55,6,3,-14, -27,65,-54,-40,29,-119,-81,-11,-50,-20,-31,-48,74,82,55,49, 
  /* [28][0][][] */ 2,-71,98,-54,-28,31,10,54,89,-65,48,72,86,-10,-17,86, -48,-97,52,38,-24,77,-127,57,-117,-9,-14,83,-46,-23,-48,-39, 9,28,-1,-11,4,50,-9,-60,-1,10,98,-82,-7,2,49,-56, 
  /* [29][0][][] */ 38,15,-65,-62,-81,-38,36,-127,-26,29,78,-40,9,-11,-23,36, -31,-64,106,8,-93,-4,19,38,55,-21,-21,49,-2,-9,30,-9, -32,-75,85,94,-93,114,26,24,-20,-18,-73,66,23,-67,-10,104, 
  /* [30][0][][] */ 42,2,21,-58,41,-18,-57,-59,11,-47,28,-17,-68,-32,-14,-32, 74,8,-127,33,81,22,-105,-19,-21,81,-113,12,-52,11,-19,9, 25,-6,-36,-49,52,9,-77,-2,-86,78,-42,41,-25,38,39,-54, 
  /* [31][0][][] */ 47,25,-41,-17,32,-17,66,-44,6,-40,83,-18,51,-29,-27,-59, 17,-35,47,44,-28,-41,127,19,69,19,4,29,93,5,-8,-14, -62,-29,95,72,-85,44,21,81,42,8,35,50,31,-52,-98,102, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant9_scale = { 32, { 0.00236153369769454, 0.0031232880428433418, 0.0029436280019581318, 0.0032061466481536627, 0.0025941205676645041, 0.0025887803640216589, 0.0028954949229955673, 0.0035406383685767651, 0.0040904139168560505, 0.0022966365795582533, 0.0032569640316069126, 0.0031489161774516106, 0.0026505524292588234, 0.0030301595106720924, 0.00264542899094522, 0.002671282272785902, 0.0026870397850871086, 0.0042976518161594868, 0.0030333662871271372, 0.0032699808944016695, 0.0027440972626209259, 0.0022532353177666664, 0.0032575346995145082, 0.0030959777068346739, 0.0029327396769076586, 0.0035581137053668499, 0.0033418291714042425, 0.0030028659384697676, 0.0030232686549425125, 0.0025862886104732752, 0.0032616970129311085, 0.0033600663300603628, } };
const TfArray<32, int> quant9_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 20, 40, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 20, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 1, 10, 16, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 10, 1, 32, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,1,20,40 } };
const TfArray<1, float> quant14_scale = { 1, { 0.003890931373462081, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0076105869375169277, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0076105869375169277, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,10,1,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0076105869375169277, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,10,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0076105869375169277, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.013340907171368599, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.013340907171368599, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,5,1,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.013340907171368599, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,160 } };
const TfArray<1, float> quant22_scale = { 1, { 0.013340907171368599, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,64 } };
const TfArray<1, float> quant23_scale = { 1, { 0.033766776323318481, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,2 } };
const TfArray<1, float> quant24_scale = { 1, { 0.38467955589294434, } };
const TfArray<1, int> quant24_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,2 } };
const TfArray<1, float> quant25_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 14 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 14,8,2 } };
const TfArray<1, int> outputs1 = { 1, { 15 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 15,11 } };
const TfArray<1, int> outputs2 = { 1, { 16 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 16 } };
const TfArray<1, int> outputs3 = { 1, { 17 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 17,12 } };
const TfArray<1, int> outputs4 = { 1, { 18 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 18,9,3 } };
const TfArray<1, int> outputs5 = { 1, { 19 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 19,13 } };
const TfArray<1, int> outputs6 = { 1, { 20 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 20 } };
const TfArray<1, int> outputs7 = { 1, { 21 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 21,1 } };
const TfArray<1, int> outputs8 = { 1, { 22 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 22,6,4 } };
const TfArray<1, int> outputs9 = { 1, { 23 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 23,7,5 } };
const TfArray<1, int> outputs10 = { 1, { 24 } };
const TfLiteSoftmaxParams opdata11 = { 1 };
const TfArray<1, int> inputs11 = { 1, { 24 } };
const TfArray<1, int> outputs11 = { 1, { 25 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension0, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 10240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension17, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension21, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension23, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension24, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 26;
  for(size_t i = 0; i < 26; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 12; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 12; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  25, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 12; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
